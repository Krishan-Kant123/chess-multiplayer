{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krishan kant\\\\Desktop\\\\Js\\\\game\\\\frontend\\\\src\\\\components\\\\Room.js\",\n  _s = $RefreshSig$();\n// import { Chessboard } from \"react-chessboard\";\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import io from \"socket.io-client\";\n// import Chat from \"./Chat\";\n// import { Chess } from \"chess.js\";\n// import \"./Room.css\"\n\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\n\n// const Room = () => {\n//   const { roomId } = useParams();\n//   const navigate = useNavigate();\n//   const username = localStorage.getItem(\"username\") || \"\";\n//   const [role, setRole] = useState(null);\n//   const [turn, setTurn] = useState(\"white\");\n//   const [fen, setFen] = useState(\"start\");\n//   const [highlightSquares, setHighlightSquares] = useState({});\n//   const [boardWidth, setBoardWidth] = useState(400);\n//   const socketRef = useRef(null);\n//   const chessRef = useRef(new Chess());\n//   const containerRef = useRef(null);\n\n//   // Calculate responsive board width\n//   useEffect(() => {\n//     const calculateBoardWidth = () => {\n//       if (containerRef.current) {\n//         const containerWidth = containerRef.current.offsetWidth;\n//         const padding = 32; // Account for container padding\n//         const maxWidth = Math.min(containerWidth - padding, 400);\n//         setBoardWidth(Math.max(maxWidth, 280)); // Minimum 280px width\n//       }\n//     };\n\n//     calculateBoardWidth();\n//     window.addEventListener('resize', calculateBoardWidth);\n\n//     return () => {\n//       window.removeEventListener('resize', calculateBoardWidth);\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     if (!username) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     socketRef.current = io(SOCKET_SERVER_URL);\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\n\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\n//       setRole(assignedRole);\n//     });\n\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\n//       setTurn(newTurn);\n//     });\n\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\n//       if (by !== role) {\n//         try {\n//           const result = chessRef.current.move(move);\n//           if (result) {\n//             setFen(chessRef.current.fen());\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//             checkGameStatus();\n//           }\n//         } catch (error) {\n//           console.error(\"Error applying move:\", error, move);\n//         }\n//       }\n//     });\n\n//     socketRef.current.on(\"invalidMove\", (msg) => {\n//       alert(msg);\n//     });\n\n//     return () => {\n//       socketRef.current.disconnect();\n//     };\n//   }, [roomId, username, navigate, role]);\n\n//   const checkGameStatus = () => {\n//     if (chessRef.current.isCheckmate()) {\n//       alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n//     } else if (chessRef.current.isStalemate()) {\n//       alert(\"Stalemate!\");\n//     } else if (chessRef.current.isCheck()) {\n//       alert(\"Check!\");\n//     }\n//   };\n\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\n//     if (role !== turn) {\n//       alert(\"It's not your turn\");\n//       return false;\n//     }\n\n//     const move = {\n//       from: sourceSquare,\n//       to: targetSquare,\n//       promotion: \"q\",\n//     };\n\n//     try {\n//       const result = chessRef.current.move(move);\n\n//       if (result) {\n//         setFen(chessRef.current.fen());\n//         setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//         socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\n//         checkGameStatus();\n//         return true;\n//       } else {\n//         alert(\"Invalid move\");\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error(\"Move error:\", error);\n//       alert(\"Invalid move\");\n//       return false;\n//     }\n//   };\n\n//   const onMouseOverSquare = (square) => {\n//     const moves = chessRef.current.moves({ square, verbose: true });\n//     if (moves.length === 0) {\n//       setHighlightSquares({});\n//       return;\n//     }\n\n//     const highlights = {};\n//     moves.forEach((m) => {\n//       highlights[m.to] = {\n//         background:\n//           chessRef.current.get(m.to) !== null\n//             ? \"rgba(255, 0, 0, 0.4)\"\n//             : \"rgba(0, 255, 0, 0.3)\",\n//       };\n//     });\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\n\n//     setHighlightSquares(highlights);\n//   };\n\n//   const onMouseOutSquare = () => {\n//     setHighlightSquares({});\n//   };\n\n//   return (\n//     <div className=\"room-container\">\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\n//       <div className=\"room-content\">\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\n//           <div className=\"info-panel\">\n//             <p>\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\n//             </p>\n//             <p>\n//               Turn: <span className=\"bold-text\">{turn}</span>\n//             </p>\n//           </div>\n//           <div className=\"chessboard-container\">\n//             <Chessboard\n//               position={fen === \"start\" ? undefined : fen}\n//               boardWidth={boardWidth}\n//               onPieceDrop={onPieceDrop}\n//               onMouseOverSquare={onMouseOverSquare}\n//               onMouseOutSquare={onMouseOutSquare}\n//               customSquareStyles={highlightSquares}\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\n//               transitionDuration={300}\n//               draggable={role === turn}\n//             />\n//           </div>\n//         </div>\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Room;\n\nimport { Chessboard } from \"react-chessboard\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport Chat from \"./Chat\";\nimport { Chess } from \"chess.js\";\nimport \"./Room.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\nconst Room = () => {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const navigate = useNavigate();\n  const username = localStorage.getItem(\"username\") || \"\";\n  const [role, setRole] = useState(null);\n  const [turn, setTurn] = useState(\"white\");\n  const [fen, setFen] = useState(\"start\");\n  const [highlightSquares, setHighlightSquares] = useState({});\n  const [boardWidth, setBoardWidth] = useState(400);\n  const [users, setUsers] = useState([]);\n  const [notifications, setNotifications] = useState([]);\n  const socketRef = useRef(null);\n  const chessRef = useRef(new Chess());\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const calculateBoardWidth = () => {\n      if (containerRef.current) {\n        const containerWidth = containerRef.current.offsetWidth;\n        const padding = 32;\n        const maxWidth = Math.min(containerWidth - padding, 400);\n        setBoardWidth(Math.max(maxWidth, 280));\n      }\n    };\n    calculateBoardWidth();\n    window.addEventListener('resize', calculateBoardWidth);\n    return () => {\n      window.removeEventListener('resize', calculateBoardWidth);\n    };\n  }, []);\n  useEffect(() => {\n    if (!username) {\n      navigate(\"/\");\n      return;\n    }\n    socketRef.current = io(SOCKET_SERVER_URL);\n    socketRef.current.emit(\"joinRoom\", {\n      roomId,\n      username\n    });\n    socketRef.current.on(\"roleAssigned\", assignedRole => {\n      setRole(assignedRole);\n    });\n    socketRef.current.on(\"turnUpdate\", newTurn => {\n      setTurn(newTurn);\n    });\n    socketRef.current.on(\"chessMove\", ({\n      move,\n      by\n    }) => {\n      if (by !== role) {\n        try {\n          const result = chessRef.current.move(move);\n          if (result) {\n            setFen(chessRef.current.fen());\n            setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n            checkGameStatus();\n          }\n        } catch (error) {\n          console.error(\"Error applying move:\", error, move);\n        }\n      }\n    });\n    socketRef.current.on(\"invalidMove\", msg => {\n      alert(msg);\n    });\n    socketRef.current.on(\"userListUpdate\", userList => {\n      setUsers(userList);\n    });\n    socketRef.current.on(\"userJoined\", ({\n      username,\n      role\n    }) => {\n      setNotifications(prev => [...prev, `${username} joined as ${role.toUpperCase()}`]);\n    });\n    socketRef.current.on(\"userLeft\", username => {\n      setNotifications(prev => [...prev, `${username} has left the room.`]);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, username, navigate, role]);\n  const checkGameStatus = () => {\n    if (chessRef.current.isCheckmate()) {\n      alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n    } else if (chessRef.current.isStalemate()) {\n      alert(\"Stalemate!\");\n    } else if (chessRef.current.isCheck()) {\n      alert(\"Check!\");\n    }\n  };\n  const onPieceDrop = (sourceSquare, targetSquare) => {\n    if (role !== turn) {\n      alert(\"It's not your turn\");\n      return false;\n    }\n    const move = {\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\"\n    };\n    try {\n      const result = chessRef.current.move(move);\n      if (result) {\n        setFen(chessRef.current.fen());\n        setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n        socketRef.current.emit(\"chessMove\", {\n          roomId,\n          move,\n          by: role\n        });\n        checkGameStatus();\n        return true;\n      } else {\n        alert(\"Invalid move\");\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Move error:\", error);\n      alert(\"Invalid move\");\n      return false;\n    }\n  };\n  const onMouseOverSquare = square => {\n    const moves = chessRef.current.moves({\n      square,\n      verbose: true\n    });\n    if (moves.length === 0) {\n      setHighlightSquares({});\n      return;\n    }\n    const highlights = {};\n    moves.forEach(m => {\n      highlights[m.to] = {\n        background: chessRef.current.get(m.to) !== null ? \"rgba(255, 0, 0, 0.4)\" : \"rgba(0, 255, 0, 0.3)\"\n      };\n    });\n    highlights[square] = {\n      background: \"rgba(0, 0, 255, 0.3)\"\n    };\n    setHighlightSquares(highlights);\n  };\n  const onMouseOutSquare = () => {\n    setHighlightSquares({});\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"room-title\",\n      children: [\"Room: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chessboard-wrapper\",\n        ref: containerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You are: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-text\",\n              children: role || \"...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 24\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Turn: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-text\",\n              children: turn\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chessboard-container\",\n          children: /*#__PURE__*/_jsxDEV(Chessboard, {\n            position: fen === \"start\" ? undefined : fen,\n            boardWidth: boardWidth,\n            onPieceDrop: onPieceDrop,\n            onMouseOverSquare: onMouseOverSquare,\n            onMouseOutSquare: onMouseOutSquare,\n            customSquareStyles: highlightSquares,\n            boardOrientation: role === \"white\" ? \"white\" : \"black\",\n            transitionDuration: 300,\n            draggable: role === turn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Players\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: users.map(u => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [u.username, \" (\", u.role, \")\"]\n            }, u.username, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notifications\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Activity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: notifications.slice(-5).map((msg, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: msg\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        socket: socketRef.current,\n        roomId: roomId,\n        username: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n};\n_s(Room, \"9HS9bhBqTkVp3UXhzp4uRxcryhA=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["Chessboard","React","useEffect","useState","useRef","useParams","useNavigate","io","Chat","Chess","jsxDEV","_jsxDEV","SOCKET_SERVER_URL","Room","_s","roomId","navigate","username","localStorage","getItem","role","setRole","turn","setTurn","fen","setFen","highlightSquares","setHighlightSquares","boardWidth","setBoardWidth","users","setUsers","notifications","setNotifications","socketRef","chessRef","containerRef","calculateBoardWidth","current","containerWidth","offsetWidth","padding","maxWidth","Math","min","max","window","addEventListener","removeEventListener","emit","on","assignedRole","newTurn","move","by","result","checkGameStatus","error","console","msg","alert","userList","prev","toUpperCase","disconnect","isCheckmate","isStalemate","isCheck","onPieceDrop","sourceSquare","targetSquare","from","to","promotion","onMouseOverSquare","square","moves","verbose","length","highlights","forEach","m","background","get","onMouseOutSquare","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","position","undefined","customSquareStyles","boardOrientation","transitionDuration","draggable","map","u","slice","i","socket","_c","$RefreshReg$"],"sources":["C:/Users/krishan kant/Desktop/Js/game/frontend/src/components/Room.js"],"sourcesContent":["// import { Chessboard } from \"react-chessboard\";\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import io from \"socket.io-client\";\r\n// import Chat from \"./Chat\";\r\n// import { Chess } from \"chess.js\";\r\n// import \"./Room.css\"\r\n\r\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\n// const Room = () => {\r\n//   const { roomId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const username = localStorage.getItem(\"username\") || \"\";\r\n//   const [role, setRole] = useState(null);\r\n//   const [turn, setTurn] = useState(\"white\");\r\n//   const [fen, setFen] = useState(\"start\");\r\n//   const [highlightSquares, setHighlightSquares] = useState({});\r\n//   const [boardWidth, setBoardWidth] = useState(400);\r\n//   const socketRef = useRef(null);\r\n//   const chessRef = useRef(new Chess());\r\n//   const containerRef = useRef(null);\r\n\r\n//   // Calculate responsive board width\r\n//   useEffect(() => {\r\n//     const calculateBoardWidth = () => {\r\n//       if (containerRef.current) {\r\n//         const containerWidth = containerRef.current.offsetWidth;\r\n//         const padding = 32; // Account for container padding\r\n//         const maxWidth = Math.min(containerWidth - padding, 400);\r\n//         setBoardWidth(Math.max(maxWidth, 280)); // Minimum 280px width\r\n//       }\r\n//     };\r\n\r\n//     calculateBoardWidth();\r\n//     window.addEventListener('resize', calculateBoardWidth);\r\n    \r\n//     return () => {\r\n//       window.removeEventListener('resize', calculateBoardWidth);\r\n//     };\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!username) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     socketRef.current = io(SOCKET_SERVER_URL);\r\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n//       setRole(assignedRole);\r\n//     });\r\n\r\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n//       setTurn(newTurn);\r\n//     });\r\n\r\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n//       if (by !== role) {\r\n//         try {\r\n//           const result = chessRef.current.move(move);\r\n//           if (result) {\r\n//             setFen(chessRef.current.fen());\r\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//             checkGameStatus();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error applying move:\", error, move);\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     socketRef.current.on(\"invalidMove\", (msg) => {\r\n//       alert(msg);\r\n//     });\r\n\r\n//     return () => {\r\n//       socketRef.current.disconnect();\r\n//     };\r\n//   }, [roomId, username, navigate, role]);\r\n\r\n//   const checkGameStatus = () => {\r\n//     if (chessRef.current.isCheckmate()) {\r\n//       alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n//     } else if (chessRef.current.isStalemate()) {\r\n//       alert(\"Stalemate!\");\r\n//     } else if (chessRef.current.isCheck()) {\r\n//       alert(\"Check!\");\r\n//     }\r\n//   };\r\n\r\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\r\n//     if (role !== turn) {\r\n//       alert(\"It's not your turn\");\r\n//       return false;\r\n//     }\r\n\r\n//     const move = {\r\n//       from: sourceSquare,\r\n//       to: targetSquare,\r\n//       promotion: \"q\",\r\n//     };\r\n\r\n//     try {\r\n//       const result = chessRef.current.move(move);\r\n\r\n//       if (result) {\r\n//         setFen(chessRef.current.fen());\r\n//         setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//         socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\r\n//         checkGameStatus();\r\n//         return true;\r\n//       } else {\r\n//         alert(\"Invalid move\");\r\n//         return false;\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Move error:\", error);\r\n//       alert(\"Invalid move\");\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const onMouseOverSquare = (square) => {\r\n//     const moves = chessRef.current.moves({ square, verbose: true });\r\n//     if (moves.length === 0) {\r\n//       setHighlightSquares({});\r\n//       return;\r\n//     }\r\n\r\n//     const highlights = {};\r\n//     moves.forEach((m) => {\r\n//       highlights[m.to] = {\r\n//         background:\r\n//           chessRef.current.get(m.to) !== null\r\n//             ? \"rgba(255, 0, 0, 0.4)\"\r\n//             : \"rgba(0, 255, 0, 0.3)\",\r\n//       };\r\n//     });\r\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\r\n\r\n//     setHighlightSquares(highlights);\r\n//   };\r\n\r\n//   const onMouseOutSquare = () => {\r\n//     setHighlightSquares({});\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"room-container\">\r\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\r\n//       <div className=\"room-content\">\r\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n//           <div className=\"info-panel\">\r\n//             <p>\r\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n//             </p>\r\n//             <p>\r\n//               Turn: <span className=\"bold-text\">{turn}</span>\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"chessboard-container\">\r\n//             <Chessboard\r\n//               position={fen === \"start\" ? undefined : fen}\r\n//               boardWidth={boardWidth}\r\n//               onPieceDrop={onPieceDrop}\r\n//               onMouseOverSquare={onMouseOverSquare}\r\n//               onMouseOutSquare={onMouseOutSquare}\r\n//               customSquareStyles={highlightSquares}\r\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n//               transitionDuration={300}\r\n//               draggable={role === turn}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Room;\r\n\r\n\r\n\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport Chat from \"./Chat\";\r\nimport { Chess } from \"chess.js\";\r\nimport \"./Room.css\"\r\n\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\nconst Room = () => {\r\n  const { roomId } = useParams();\r\n  const navigate = useNavigate();\r\n  const username = localStorage.getItem(\"username\") || \"\";\r\n  const [role, setRole] = useState(null);\r\n  const [turn, setTurn] = useState(\"white\");\r\n  const [fen, setFen] = useState(\"start\");\r\n  const [highlightSquares, setHighlightSquares] = useState({});\r\n  const [boardWidth, setBoardWidth] = useState(400);\r\n  const [users, setUsers] = useState([]);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const socketRef = useRef(null);\r\n  const chessRef = useRef(new Chess());\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const calculateBoardWidth = () => {\r\n      if (containerRef.current) {\r\n        const containerWidth = containerRef.current.offsetWidth;\r\n        const padding = 32;\r\n        const maxWidth = Math.min(containerWidth - padding, 400);\r\n        setBoardWidth(Math.max(maxWidth, 280));\r\n      }\r\n    };\r\n\r\n    calculateBoardWidth();\r\n    window.addEventListener('resize', calculateBoardWidth);\r\n    return () => {\r\n      window.removeEventListener('resize', calculateBoardWidth);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!username) {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    socketRef.current = io(SOCKET_SERVER_URL);\r\n    socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n    socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n      setRole(assignedRole);\r\n    });\r\n\r\n    socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n      setTurn(newTurn);\r\n    });\r\n\r\n    socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n      if (by !== role) {\r\n        try {\r\n          const result = chessRef.current.move(move);\r\n          if (result) {\r\n            setFen(chessRef.current.fen());\r\n            setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n            checkGameStatus();\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error applying move:\", error, move);\r\n        }\r\n      }\r\n    });\r\n\r\n    socketRef.current.on(\"invalidMove\", (msg) => {\r\n      alert(msg);\r\n    });\r\n\r\n    socketRef.current.on(\"userListUpdate\", (userList) => {\r\n      setUsers(userList);\r\n    });\r\n\r\n    socketRef.current.on(\"userJoined\", ({ username, role }) => {\r\n      setNotifications((prev) => [\r\n        ...prev,\r\n        `${username} joined as ${role.toUpperCase()}`,\r\n      ]);\r\n    });\r\n\r\n    socketRef.current.on(\"userLeft\", (username) => {\r\n      setNotifications((prev) => [\r\n        ...prev,\r\n        `${username} has left the room.`,\r\n      ]);\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, [roomId, username, navigate, role]);\r\n\r\n  const checkGameStatus = () => {\r\n    if (chessRef.current.isCheckmate()) {\r\n      alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n    } else if (chessRef.current.isStalemate()) {\r\n      alert(\"Stalemate!\");\r\n    } else if (chessRef.current.isCheck()) {\r\n      alert(\"Check!\");\r\n    }\r\n  };\r\n\r\n  const onPieceDrop = (sourceSquare, targetSquare) => {\r\n    if (role !== turn) {\r\n      alert(\"It's not your turn\");\r\n      return false;\r\n    }\r\n\r\n    const move = {\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: \"q\",\r\n    };\r\n\r\n    try {\r\n      const result = chessRef.current.move(move);\r\n\r\n      if (result) {\r\n        setFen(chessRef.current.fen());\r\n        setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n        socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\r\n        checkGameStatus();\r\n        return true;\r\n      } else {\r\n        alert(\"Invalid move\");\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Move error:\", error);\r\n      alert(\"Invalid move\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const onMouseOverSquare = (square) => {\r\n    const moves = chessRef.current.moves({ square, verbose: true });\r\n    if (moves.length === 0) {\r\n      setHighlightSquares({});\r\n      return;\r\n    }\r\n\r\n    const highlights = {};\r\n    moves.forEach((m) => {\r\n      highlights[m.to] = {\r\n        background:\r\n          chessRef.current.get(m.to) !== null\r\n            ? \"rgba(255, 0, 0, 0.4)\"\r\n            : \"rgba(0, 255, 0, 0.3)\",\r\n      };\r\n    });\r\n    highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\r\n    setHighlightSquares(highlights);\r\n  };\r\n\r\n  const onMouseOutSquare = () => {\r\n    setHighlightSquares({});\r\n  };\r\n\r\n  return (\r\n    <div className=\"room-container\">\r\n      <h2 className=\"room-title\">Room: {roomId}</h2>\r\n      <div className=\"room-content\">\r\n        <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n          <div className=\"info-panel\">\r\n            <p>\r\n              You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n            </p>\r\n            <p>\r\n              Turn: <span className=\"bold-text\">{turn}</span>\r\n            </p>\r\n          </div>\r\n          <div className=\"chessboard-container\">\r\n            <Chessboard\r\n              position={fen === \"start\" ? undefined : fen}\r\n              boardWidth={boardWidth}\r\n              onPieceDrop={onPieceDrop}\r\n              onMouseOverSquare={onMouseOverSquare}\r\n              onMouseOutSquare={onMouseOutSquare}\r\n              customSquareStyles={highlightSquares}\r\n              boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n              transitionDuration={300}\r\n              draggable={role === turn}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"sidebar\">\r\n          <div className=\"user-list\">\r\n            <h4>Players</h4>\r\n            <ul>\r\n              {users.map((u) => (\r\n                <li key={u.username}>\r\n                  {u.username} ({u.role})\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"notifications\">\r\n            <h4>Activity</h4>\r\n            <ul>\r\n              {notifications.slice(-5).map((msg, i) => (\r\n                <li key={i}>{msg}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAO,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,iBAAiB,GAAG,uBAAuB;AAEjD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM;IAAEC;EAAO,CAAC,GAAGV,SAAS,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
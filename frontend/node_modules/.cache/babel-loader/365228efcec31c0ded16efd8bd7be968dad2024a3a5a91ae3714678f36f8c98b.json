{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krishan kant\\\\Desktop\\\\Js\\\\game\\\\frontend\\\\src\\\\components\\\\Room.js\",\n  _s = $RefreshSig$();\n// import { Chessboard } from \"react-chessboard\";\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import io from \"socket.io-client\";\n// import Chat from \"./Chat\";\n// import { Chess } from \"chess.js\";\n// import \"./Room.css\"\n\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\n\n// const Room = () => {\n//   const { roomId } = useParams();\n//   const navigate = useNavigate();\n//   const username = localStorage.getItem(\"username\") || \"\";\n//   const [role, setRole] = useState(null);\n//   const [turn, setTurn] = useState(\"white\");\n//   const [fen, setFen] = useState(\"start\");\n//   const [highlightSquares, setHighlightSquares] = useState({});\n//   const [boardWidth, setBoardWidth] = useState(400);\n//   const socketRef = useRef(null);\n//   const chessRef = useRef(new Chess());\n//   const containerRef = useRef(null);\n\n//   // Calculate responsive board width\n//   useEffect(() => {\n//     const calculateBoardWidth = () => {\n//       if (containerRef.current) {\n//         const containerWidth = containerRef.current.offsetWidth;\n//         const padding = 32; // Account for container padding\n//         const maxWidth = Math.min(containerWidth - padding, 400);\n//         setBoardWidth(Math.max(maxWidth, 280)); // Minimum 280px width\n//       }\n//     };\n\n//     calculateBoardWidth();\n//     window.addEventListener('resize', calculateBoardWidth);\n\n//     return () => {\n//       window.removeEventListener('resize', calculateBoardWidth);\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     if (!username) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     socketRef.current = io(SOCKET_SERVER_URL);\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\n\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\n//       setRole(assignedRole);\n//     });\n\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\n//       setTurn(newTurn);\n//     });\n\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\n//       if (by !== role) {\n//         try {\n//           const result = chessRef.current.move(move);\n//           if (result) {\n//             setFen(chessRef.current.fen());\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//             checkGameStatus();\n//           }\n//         } catch (error) {\n//           console.error(\"Error applying move:\", error, move);\n//         }\n//       }\n//     });\n\n//     socketRef.current.on(\"invalidMove\", (msg) => {\n//       alert(msg);\n//     });\n\n//     return () => {\n//       socketRef.current.disconnect();\n//     };\n//   }, [roomId, username, navigate, role]);\n\n//   const checkGameStatus = () => {\n//     if (chessRef.current.isCheckmate()) {\n//       alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n//     } else if (chessRef.current.isStalemate()) {\n//       alert(\"Stalemate!\");\n//     } else if (chessRef.current.isCheck()) {\n//       alert(\"Check!\");\n//     }\n//   };\n\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\n//     if (role !== turn) {\n//       alert(\"It's not your turn\");\n//       return false;\n//     }\n\n//     const move = {\n//       from: sourceSquare,\n//       to: targetSquare,\n//       promotion: \"q\",\n//     };\n\n//     try {\n//       const result = chessRef.current.move(move);\n\n//       if (result) {\n//         setFen(chessRef.current.fen());\n//         setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//         socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\n//         checkGameStatus();\n//         return true;\n//       } else {\n//         alert(\"Invalid move\");\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error(\"Move error:\", error);\n//       alert(\"Invalid move\");\n//       return false;\n//     }\n//   };\n\n//   const onMouseOverSquare = (square) => {\n//     const moves = chessRef.current.moves({ square, verbose: true });\n//     if (moves.length === 0) {\n//       setHighlightSquares({});\n//       return;\n//     }\n\n//     const highlights = {};\n//     moves.forEach((m) => {\n//       highlights[m.to] = {\n//         background:\n//           chessRef.current.get(m.to) !== null\n//             ? \"rgba(255, 0, 0, 0.4)\"\n//             : \"rgba(0, 255, 0, 0.3)\",\n//       };\n//     });\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\n\n//     setHighlightSquares(highlights);\n//   };\n\n//   const onMouseOutSquare = () => {\n//     setHighlightSquares({});\n//   };\n\n//   return (\n//     <div className=\"room-container\">\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\n//       <div className=\"room-content\">\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\n//           <div className=\"info-panel\">\n//             <p>\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\n//             </p>\n//             <p>\n//               Turn: <span className=\"bold-text\">{turn}</span>\n//             </p>\n//           </div>\n//           <div className=\"chessboard-container\">\n//             <Chessboard\n//               position={fen === \"start\" ? undefined : fen}\n//               boardWidth={boardWidth}\n//               onPieceDrop={onPieceDrop}\n//               onMouseOverSquare={onMouseOverSquare}\n//               onMouseOutSquare={onMouseOutSquare}\n//               customSquareStyles={highlightSquares}\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\n//               transitionDuration={300}\n//               draggable={role === turn}\n//             />\n//           </div>\n//         </div>\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Room;\n\nimport { Chessboard } from \"react-chessboard\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport Chat from \"./Chat\";\nimport { Chess } from \"chess.js\";\nimport \"./Room.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\nconst Room = () => {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const navigate = useNavigate();\n  const username = localStorage.getItem(\"username\") || \"\";\n  const [role, setRole] = useState(null);\n  const [turn, setTurn] = useState(\"white\");\n  const [fen, setFen] = useState(\"start\");\n  const [highlightSquares, setHighlightSquares] = useState({});\n  const [boardWidth, setBoardWidth] = useState(400);\n  const [players, setPlayers] = useState({\n    white: null,\n    black: null\n  });\n  const [gameStarted, setGameStarted] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState(\"connecting\");\n  const socketRef = useRef(null);\n  const chessRef = useRef(new Chess());\n  const containerRef = useRef(null);\n\n  // Calculate responsive board width\n  useEffect(() => {\n    const calculateBoardWidth = () => {\n      if (containerRef.current) {\n        const containerWidth = containerRef.current.offsetWidth;\n        const padding = 32;\n        const maxWidth = Math.min(containerWidth - padding, 400);\n        setBoardWidth(Math.max(maxWidth, 280));\n      }\n    };\n    calculateBoardWidth();\n    window.addEventListener('resize', calculateBoardWidth);\n    return () => {\n      window.removeEventListener('resize', calculateBoardWidth);\n    };\n  }, []);\n  useEffect(() => {\n    if (!username) {\n      navigate(\"/\");\n      return;\n    }\n    setConnectionStatus(\"connecting\");\n    socketRef.current = io(SOCKET_SERVER_URL);\n    socketRef.current.on(\"connect\", () => {\n      setConnectionStatus(\"connected\");\n      console.log(\"Connected to server\");\n    });\n    socketRef.current.on(\"disconnect\", () => {\n      setConnectionStatus(\"disconnected\");\n      console.log(\"Disconnected from server\");\n    });\n    socketRef.current.emit(\"joinRoom\", {\n      roomId,\n      username\n    });\n    socketRef.current.on(\"roleAssigned\", assignedRole => {\n      console.log(\"Role assigned:\", assignedRole);\n      setRole(assignedRole);\n    });\n    socketRef.current.on(\"turnUpdate\", newTurn => {\n      console.log(\"Turn update:\", newTurn);\n      setTurn(newTurn);\n    });\n    socketRef.current.on(\"playersUpdate\", playersData => {\n      console.log(\"Players update:\", playersData);\n      setPlayers(playersData);\n    });\n    socketRef.current.on(\"gameStarted\", started => {\n      console.log(\"Game started:\", started);\n      setGameStarted(started);\n    });\n    socketRef.current.on(\"chessMove\", ({\n      move,\n      by\n    }) => {\n      console.log(\"Chess move received:\", move, \"by:\", by);\n      if (by !== role) {\n        try {\n          const result = chessRef.current.move(move);\n          if (result) {\n            setFen(chessRef.current.fen());\n            setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n            checkGameStatus();\n          }\n        } catch (error) {\n          console.error(\"Error applying move:\", error, move);\n        }\n      }\n    });\n    socketRef.current.on(\"invalidMove\", msg => {\n      alert(msg);\n    });\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, [roomId, username, navigate, role]);\n  const checkGameStatus = () => {\n    if (chessRef.current.isCheckmate()) {\n      alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n    } else if (chessRef.current.isStalemate()) {\n      alert(\"Stalemate!\");\n    } else if (chessRef.current.isCheck()) {\n      alert(\"Check!\");\n    }\n  };\n  const onPieceDrop = (sourceSquare, targetSquare) => {\n    if (role === \"viewer\") {\n      alert(\"You are a viewer and cannot make moves\");\n      return false;\n    }\n    if (role !== turn) {\n      alert(\"It's not your turn\");\n      return false;\n    }\n    if (!gameStarted) {\n      alert(\"Waiting for another player to join\");\n      return false;\n    }\n    const move = {\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\"\n    };\n    try {\n      const result = chessRef.current.move(move);\n      if (result) {\n        setFen(chessRef.current.fen());\n        setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n        socketRef.current.emit(\"chessMove\", {\n          roomId,\n          move,\n          by: role\n        });\n        checkGameStatus();\n        return true;\n      } else {\n        alert(\"Invalid move\");\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Move error:\", error);\n      alert(\"Invalid move\");\n      return false;\n    }\n  };\n  const onMouseOverSquare = square => {\n    if (role === \"viewer\" || role !== turn || !gameStarted) {\n      return;\n    }\n    const moves = chessRef.current.moves({\n      square,\n      verbose: true\n    });\n    if (moves.length === 0) {\n      setHighlightSquares({});\n      return;\n    }\n    const highlights = {};\n    moves.forEach(m => {\n      highlights[m.to] = {\n        background: chessRef.current.get(m.to) !== null ? \"rgba(255, 0, 0, 0.4)\" : \"rgba(0, 255, 0, 0.3)\"\n      };\n    });\n    highlights[square] = {\n      background: \"rgba(0, 0, 255, 0.3)\"\n    };\n    setHighlightSquares(highlights);\n  };\n  const onMouseOutSquare = () => {\n    setHighlightSquares({});\n  };\n  const getStatusMessage = () => {\n    if (connectionStatus !== \"connected\") {\n      return `Connection: ${connectionStatus}`;\n    }\n    if (!gameStarted) {\n      return `Waiting for ${!players.white ? 'white' : 'black'} player...`;\n    }\n    if (role === \"viewer\") {\n      return \"You are viewing the game\";\n    }\n    return `${turn}'s turn`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"room-title\",\n      children: [\"Room: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chessboard-wrapper\",\n        ref: containerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You are: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-text\",\n              children: role || \"...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 24\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Status: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-text\",\n              children: getStatusMessage()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"players-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"White: \", players.white || \"Waiting...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Black: \", players.black || \"Waiting...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chessboard-container\",\n          children: /*#__PURE__*/_jsxDEV(Chessboard, {\n            position: fen === \"start\" ? undefined : fen,\n            boardWidth: boardWidth,\n            onPieceDrop: onPieceDrop,\n            onMouseOverSquare: onMouseOverSquare,\n            onMouseOutSquare: onMouseOutSquare,\n            customSquareStyles: highlightSquares,\n            boardOrientation: role === \"white\" ? \"white\" : \"black\",\n            transitionDuration: 300,\n            draggable: role !== \"viewer\" && role === turn && gameStarted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        socket: socketRef.current,\n        roomId: roomId,\n        username: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 5\n  }, this);\n};\n_s(Room, \"jLG5tKZuk0wfOJdnNPWKeX6fpd8=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["Chessboard","React","useEffect","useState","useRef","useParams","useNavigate","io","Chat","Chess","jsxDEV","_jsxDEV","SOCKET_SERVER_URL","Room","_s","roomId","navigate","username","localStorage","getItem","role","setRole","turn","setTurn","fen","setFen","highlightSquares","setHighlightSquares","boardWidth","setBoardWidth","players","setPlayers","white","black","gameStarted","setGameStarted","connectionStatus","setConnectionStatus","socketRef","chessRef","containerRef","calculateBoardWidth","current","containerWidth","offsetWidth","padding","maxWidth","Math","min","max","window","addEventListener","removeEventListener","on","console","log","emit","assignedRole","newTurn","playersData","started","move","by","result","checkGameStatus","error","msg","alert","disconnect","isCheckmate","isStalemate","isCheck","onPieceDrop","sourceSquare","targetSquare","from","to","promotion","onMouseOverSquare","square","moves","verbose","length","highlights","forEach","m","background","get","onMouseOutSquare","getStatusMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","position","undefined","customSquareStyles","boardOrientation","transitionDuration","draggable","socket","_c","$RefreshReg$"],"sources":["C:/Users/krishan kant/Desktop/Js/game/frontend/src/components/Room.js"],"sourcesContent":["// import { Chessboard } from \"react-chessboard\";\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import io from \"socket.io-client\";\r\n// import Chat from \"./Chat\";\r\n// import { Chess } from \"chess.js\";\r\n// import \"./Room.css\"\r\n\r\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\n// const Room = () => {\r\n//   const { roomId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const username = localStorage.getItem(\"username\") || \"\";\r\n//   const [role, setRole] = useState(null);\r\n//   const [turn, setTurn] = useState(\"white\");\r\n//   const [fen, setFen] = useState(\"start\");\r\n//   const [highlightSquares, setHighlightSquares] = useState({});\r\n//   const [boardWidth, setBoardWidth] = useState(400);\r\n//   const socketRef = useRef(null);\r\n//   const chessRef = useRef(new Chess());\r\n//   const containerRef = useRef(null);\r\n\r\n//   // Calculate responsive board width\r\n//   useEffect(() => {\r\n//     const calculateBoardWidth = () => {\r\n//       if (containerRef.current) {\r\n//         const containerWidth = containerRef.current.offsetWidth;\r\n//         const padding = 32; // Account for container padding\r\n//         const maxWidth = Math.min(containerWidth - padding, 400);\r\n//         setBoardWidth(Math.max(maxWidth, 280)); // Minimum 280px width\r\n//       }\r\n//     };\r\n\r\n//     calculateBoardWidth();\r\n//     window.addEventListener('resize', calculateBoardWidth);\r\n    \r\n//     return () => {\r\n//       window.removeEventListener('resize', calculateBoardWidth);\r\n//     };\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!username) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     socketRef.current = io(SOCKET_SERVER_URL);\r\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n//       setRole(assignedRole);\r\n//     });\r\n\r\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n//       setTurn(newTurn);\r\n//     });\r\n\r\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n//       if (by !== role) {\r\n//         try {\r\n//           const result = chessRef.current.move(move);\r\n//           if (result) {\r\n//             setFen(chessRef.current.fen());\r\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//             checkGameStatus();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error applying move:\", error, move);\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     socketRef.current.on(\"invalidMove\", (msg) => {\r\n//       alert(msg);\r\n//     });\r\n\r\n//     return () => {\r\n//       socketRef.current.disconnect();\r\n//     };\r\n//   }, [roomId, username, navigate, role]);\r\n\r\n//   const checkGameStatus = () => {\r\n//     if (chessRef.current.isCheckmate()) {\r\n//       alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n//     } else if (chessRef.current.isStalemate()) {\r\n//       alert(\"Stalemate!\");\r\n//     } else if (chessRef.current.isCheck()) {\r\n//       alert(\"Check!\");\r\n//     }\r\n//   };\r\n\r\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\r\n//     if (role !== turn) {\r\n//       alert(\"It's not your turn\");\r\n//       return false;\r\n//     }\r\n\r\n//     const move = {\r\n//       from: sourceSquare,\r\n//       to: targetSquare,\r\n//       promotion: \"q\",\r\n//     };\r\n\r\n//     try {\r\n//       const result = chessRef.current.move(move);\r\n\r\n//       if (result) {\r\n//         setFen(chessRef.current.fen());\r\n//         setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//         socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\r\n//         checkGameStatus();\r\n//         return true;\r\n//       } else {\r\n//         alert(\"Invalid move\");\r\n//         return false;\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Move error:\", error);\r\n//       alert(\"Invalid move\");\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const onMouseOverSquare = (square) => {\r\n//     const moves = chessRef.current.moves({ square, verbose: true });\r\n//     if (moves.length === 0) {\r\n//       setHighlightSquares({});\r\n//       return;\r\n//     }\r\n\r\n//     const highlights = {};\r\n//     moves.forEach((m) => {\r\n//       highlights[m.to] = {\r\n//         background:\r\n//           chessRef.current.get(m.to) !== null\r\n//             ? \"rgba(255, 0, 0, 0.4)\"\r\n//             : \"rgba(0, 255, 0, 0.3)\",\r\n//       };\r\n//     });\r\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\r\n\r\n//     setHighlightSquares(highlights);\r\n//   };\r\n\r\n//   const onMouseOutSquare = () => {\r\n//     setHighlightSquares({});\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"room-container\">\r\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\r\n//       <div className=\"room-content\">\r\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n//           <div className=\"info-panel\">\r\n//             <p>\r\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n//             </p>\r\n//             <p>\r\n//               Turn: <span className=\"bold-text\">{turn}</span>\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"chessboard-container\">\r\n//             <Chessboard\r\n//               position={fen === \"start\" ? undefined : fen}\r\n//               boardWidth={boardWidth}\r\n//               onPieceDrop={onPieceDrop}\r\n//               onMouseOverSquare={onMouseOverSquare}\r\n//               onMouseOutSquare={onMouseOutSquare}\r\n//               customSquareStyles={highlightSquares}\r\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n//               transitionDuration={300}\r\n//               draggable={role === turn}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Room;\r\n\r\n\r\n\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport Chat from \"./Chat\";\r\nimport { Chess } from \"chess.js\";\r\nimport \"./Room.css\"\r\n\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\nconst Room = () => {\r\n  const { roomId } = useParams();\r\n  const navigate = useNavigate();\r\n  const username = localStorage.getItem(\"username\") || \"\";\r\n  const [role, setRole] = useState(null);\r\n  const [turn, setTurn] = useState(\"white\");\r\n  const [fen, setFen] = useState(\"start\");\r\n  const [highlightSquares, setHighlightSquares] = useState({});\r\n  const [boardWidth, setBoardWidth] = useState(400);\r\n  const [players, setPlayers] = useState({ white: null, black: null });\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState(\"connecting\");\r\n  const socketRef = useRef(null);\r\n  const chessRef = useRef(new Chess());\r\n  const containerRef = useRef(null);\r\n\r\n  // Calculate responsive board width\r\n  useEffect(() => {\r\n    const calculateBoardWidth = () => {\r\n      if (containerRef.current) {\r\n        const containerWidth = containerRef.current.offsetWidth;\r\n        const padding = 32;\r\n        const maxWidth = Math.min(containerWidth - padding, 400);\r\n        setBoardWidth(Math.max(maxWidth, 280));\r\n      }\r\n    };\r\n\r\n    calculateBoardWidth();\r\n    window.addEventListener('resize', calculateBoardWidth);\r\n    \r\n    return () => {\r\n      window.removeEventListener('resize', calculateBoardWidth);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!username) {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    setConnectionStatus(\"connecting\");\r\n    socketRef.current = io(SOCKET_SERVER_URL);\r\n\r\n    socketRef.current.on(\"connect\", () => {\r\n      setConnectionStatus(\"connected\");\r\n      console.log(\"Connected to server\");\r\n    });\r\n\r\n    socketRef.current.on(\"disconnect\", () => {\r\n      setConnectionStatus(\"disconnected\");\r\n      console.log(\"Disconnected from server\");\r\n    });\r\n\r\n    socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n    socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n      console.log(\"Role assigned:\", assignedRole);\r\n      setRole(assignedRole);\r\n    });\r\n\r\n    socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n      console.log(\"Turn update:\", newTurn);\r\n      setTurn(newTurn);\r\n    });\r\n\r\n    socketRef.current.on(\"playersUpdate\", (playersData) => {\r\n      console.log(\"Players update:\", playersData);\r\n      setPlayers(playersData);\r\n      \r\n    });\r\n\r\n    socketRef.current.on(\"gameStarted\", (started) => {\r\n      console.log(\"Game started:\", started);\r\n      setGameStarted(started);\r\n    });\r\n\r\n    socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n      console.log(\"Chess move received:\", move, \"by:\", by);\r\n      if (by !== role) {\r\n        try {\r\n          const result = chessRef.current.move(move);\r\n          if (result) {\r\n            setFen(chessRef.current.fen());\r\n            setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n            checkGameStatus();\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error applying move:\", error, move);\r\n        }\r\n      }\r\n    });\r\n\r\n    socketRef.current.on(\"invalidMove\", (msg) => {\r\n      alert(msg);\r\n    });\r\n\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n      }\r\n    };\r\n  }, [roomId, username, navigate, role]);\r\n\r\n  const checkGameStatus = () => {\r\n    if (chessRef.current.isCheckmate()) {\r\n      alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n    } else if (chessRef.current.isStalemate()) {\r\n      alert(\"Stalemate!\");\r\n    } else if (chessRef.current.isCheck()) {\r\n      alert(\"Check!\");\r\n    }\r\n  };\r\n\r\n  const onPieceDrop = (sourceSquare, targetSquare) => {\r\n    if (role === \"viewer\") {\r\n      alert(\"You are a viewer and cannot make moves\");\r\n      return false;\r\n    }\r\n\r\n    if (role !== turn) {\r\n      alert(\"It's not your turn\");\r\n      return false;\r\n    }\r\n\r\n    if (!gameStarted) {\r\n      alert(\"Waiting for another player to join\");\r\n      return false;\r\n    }\r\n\r\n    const move = {\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: \"q\",\r\n    };\r\n\r\n    try {\r\n      const result = chessRef.current.move(move);\r\n\r\n      if (result) {\r\n        setFen(chessRef.current.fen());\r\n        setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n        socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\r\n        checkGameStatus();\r\n        return true;\r\n      } else {\r\n        alert(\"Invalid move\");\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Move error:\", error);\r\n      alert(\"Invalid move\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const onMouseOverSquare = (square) => {\r\n    if (role === \"viewer\" || role !== turn || !gameStarted) {\r\n      return;\r\n    }\r\n\r\n    const moves = chessRef.current.moves({ square, verbose: true });\r\n    if (moves.length === 0) {\r\n      setHighlightSquares({});\r\n      return;\r\n    }\r\n\r\n    const highlights = {};\r\n    moves.forEach((m) => {\r\n      highlights[m.to] = {\r\n        background:\r\n          chessRef.current.get(m.to) !== null\r\n            ? \"rgba(255, 0, 0, 0.4)\"\r\n            : \"rgba(0, 255, 0, 0.3)\",\r\n      };\r\n    });\r\n    highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\r\n\r\n    setHighlightSquares(highlights);\r\n  };\r\n\r\n  const onMouseOutSquare = () => {\r\n    setHighlightSquares({});\r\n  };\r\n\r\n  const getStatusMessage = () => {\r\n    if (connectionStatus !== \"connected\") {\r\n      return `Connection: ${connectionStatus}`;\r\n    }\r\n    if (!gameStarted) {\r\n      return `Waiting for ${!players.white ? 'white' : 'black'} player...`;\r\n    }\r\n    if (role === \"viewer\") {\r\n      return \"You are viewing the game\";\r\n    }\r\n    return `${turn}'s turn`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"room-container\">\r\n      <h2 className=\"room-title\">Room: {roomId}</h2>\r\n      <div className=\"room-content\">\r\n        <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n          <div className=\"info-panel\">\r\n            <p>\r\n              You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n            </p>\r\n            <p>\r\n              Status: <span className=\"bold-text\">{getStatusMessage()}</span>\r\n            </p>\r\n            <div className=\"players-info\">\r\n              <p>White: {players.white || \"Waiting...\"}</p>\r\n              <p>Black: {players.black || \"Waiting...\"}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"chessboard-container\">\r\n            <Chessboard\r\n              position={fen === \"start\" ? undefined : fen}\r\n              boardWidth={boardWidth}\r\n              onPieceDrop={onPieceDrop}\r\n              onMouseOverSquare={onMouseOverSquare}\r\n              onMouseOutSquare={onMouseOutSquare}\r\n              customSquareStyles={highlightSquares}\r\n              boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n              transitionDuration={300}\r\n              draggable={role !== \"viewer\" && role === turn && gameStarted}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAO,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,iBAAiB,GAAG,uBAAuB;AAEjD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM;IAAEC;EAAO,CAAC,GAAGV,SAAS,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// import { Chessboard } from \"react-chessboard\";\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import io from \"socket.io-client\";\n// import Chat from \"./Chat\";\n// import { Chess } from \"chess.js\";\n// import \"./Room.css\";\n// import toast from \"react-hot-toast\";\n\n// // const SOCKET_SERVER_URL = \"http://localhost:4000\";\n// const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\n\n// const Room = () => {\n//   const { roomId } = useParams();\n//   const navigate = useNavigate();\n//   const username = localStorage.getItem(\"username\") || \"\";\n//   const [role, setRole] = useState(null);\n//   const [turn, setTurn] = useState(\"white\");\n//   const [fen, setFen] = useState(\"start\");\n//   const [highlightSquares, setHighlightSquares] = useState({});\n//   const [boardWidth, setBoardWidth] = useState(400);\n//   const [selectedSquare, setSelectedSquare] = useState(null); // 👈 New state\n//   const socketRef = useRef(null);\n//   const chessRef = useRef(new Chess());\n//   const containerRef = useRef(null);\n\n//   useEffect(() => {\n//     const calculateBoardWidth = () => {\n//       if (containerRef.current) {\n//         const containerWidth = containerRef.current.offsetWidth;\n//         const padding = 32;\n//         const maxWidth = Math.min(containerWidth - padding, 400);\n//         setBoardWidth(Math.max(maxWidth, 280));\n//       }\n//     };\n\n//     calculateBoardWidth();\n//     window.addEventListener(\"resize\", calculateBoardWidth);\n//     return () => window.removeEventListener(\"resize\", calculateBoardWidth);\n//   }, []);\n\n//   useEffect(() => {\n//     if (!username) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     socketRef.current = io(SOCKET_SERVER_URL);\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\n\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\n//       setRole(assignedRole);\n//     });\n\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\n//       setTurn(newTurn);\n//     });\n\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\n//       if (by !== role) {\n//         try {\n//           const result = chessRef.current.move(move);\n//           if (result) {\n//             setFen(chessRef.current.fen());\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//             checkGameStatus();\n//           }\n//         } catch (error) {\n//           console.error(\"Error applying move:\", error, move);\n//         }\n//       }\n//     });\n\n//     socketRef.current.on(\"invalidMove\", (msg) => {\n//       toast.error(msg);\n//     });\n\n//     return () => {\n//       socketRef.current.disconnect();\n//     };\n//   }, [roomId, navigate]);\n\n//   const checkGameStatus = () => {\n//     if (chessRef.current.isCheckmate()) {\n//       toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n//     } else if (chessRef.current.isStalemate()) {\n//       toast(\"Stalemate!\", { icon: \"🤝\" });\n//     } else if (chessRef.current.isCheck()) {\n//       toast(\"Check!\", { icon: \"⚠️\" });\n//     }\n//   };\n\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\n//     // Disabled since we use tap-to-move now\n//     return false;\n//   };\n\n//   const onSquareClick = (square) => {\n//     if (role !== turn) {\n//       toast.error(\"It's not your turn\");\n//       return;\n//     }\n\n//     if (!selectedSquare) {\n//       setSelectedSquare(square);\n//       onMouseOverSquare(square); // optional: highlight options\n//     } else {\n//       const move = {\n//         from: selectedSquare,\n//         to: square,\n//         promotion: \"q\",\n//       };\n\n//       try {\n//         const result = chessRef.current.move(move);\n//         if (result) {\n//           setFen(chessRef.current.fen());\n//           setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//           socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\n//           checkGameStatus();\n//         } else {\n//           toast.error(\"Invalid move\");\n//         }\n//       } catch (e) {\n//         toast.error(\"Invalid move\");\n//       }\n\n//       setSelectedSquare(null);\n//       setHighlightSquares({});\n//     }\n//   };\n\n//   const onMouseOverSquare = (square) => {\n//     const moves = chessRef.current.moves({ square, verbose: true });\n//     if (moves.length === 0) {\n//       setHighlightSquares({});\n//       return;\n//     }\n\n//     const highlights = {};\n//     moves.forEach((m) => {\n//       highlights[m.to] = {\n//         background:\n//           chessRef.current.get(m.to) !== null\n//             ? \"rgba(255, 0, 0, 0.4)\"\n//             : \"rgba(0, 255, 0, 0.3)\",\n//       };\n//     });\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\n//     setHighlightSquares(highlights);\n//   };\n\n//   const onMouseOutSquare = () => {\n//     setHighlightSquares({});\n//   };\n\n//   return (\n//     <div className=\"room-container\">\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\n//       <div className=\"room-content\">\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\n//           <div className=\"info-panel\">\n//             <p>\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\n//             </p>\n//             <p>\n//               Turn: <span className=\"bold-text\">{turn}</span>\n//             </p>\n//           </div>\n//           <div className=\"chessboard-container\">\n//             <Chessboard\n//               position={fen === \"start\" ? undefined : fen}\n//               boardWidth={boardWidth}\n//               onSquareClick={onSquareClick}\n//               onMouseOverSquare={onMouseOverSquare}\n//               onMouseOutSquare={onMouseOutSquare}\n//               customSquareStyles={highlightSquares}\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\n//               transitionDuration={300}\n//               draggable={false} // 👈 Important: disable dragging\n//             />\n//           </div>\n//         </div>\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Room;\n\n// import { Chessboard } from \"react-chessboard\";\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import io from \"socket.io-client\";\n// import Chat from \"./Chat\";\n// import { Chess } from \"chess.js\";\n// import \"./Room.css\";\n// import toast from \"react-hot-toast\";\n\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\n// // const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\n\n// const Room = () => {\n//   const { roomId } = useParams();\n//   const navigate = useNavigate();\n//   const username = localStorage.getItem(\"username\") || \"\";\n//   const [role, setRole] = useState(null);\n//   const [turn, setTurn] = useState(\"white\");\n//   const [fen, setFen] = useState(\"start\");\n//   const [highlightSquares, setHighlightSquares] = useState({});\n//   const [boardWidth, setBoardWidth] = useState(400);\n//   const [selectedSquare, setSelectedSquare] = useState(null);\n//   const [players, setPlayers] = useState({ white: null, black: null });\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const socketRef = useRef(null);\n//   const chessRef = useRef(new Chess());\n//   const containerRef = useRef(null);\n\n//   useEffect(() => {\n//     const calculateBoardWidth = () => {\n//       if (containerRef.current) {\n//         const containerWidth = containerRef.current.offsetWidth;\n//         const padding = 32;\n//         const maxWidth = Math.min(containerWidth - padding, 400);\n//         setBoardWidth(Math.max(maxWidth, 280));\n//       }\n//     };\n\n//     calculateBoardWidth();\n//     window.addEventListener(\"resize\", calculateBoardWidth);\n//     return () => window.removeEventListener(\"resize\", calculateBoardWidth);\n//   }, []);\n\n//   useEffect(() => {\n//     if (!username) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     socketRef.current = io(SOCKET_SERVER_URL);\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\n\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\n//       setRole(assignedRole);\n//     });\n\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\n//       setTurn(newTurn);\n//     });\n\n//     socketRef.current.on(\"fenUpdate\", (savedFen) => {\n//       if (savedFen && savedFen !== \"start\") {\n//         chessRef.current.load(savedFen);\n//         setFen(savedFen);\n//       }\n//     });\n\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\n//       if (by !== role) {\n//         try {\n//           const result = chessRef.current.move(move);\n//           if (result) {\n//             setFen(chessRef.current.fen());\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//             checkGameStatus();\n//           }\n//         } catch (error) {\n//           console.error(\"Error applying move:\", error, move);\n//         }\n//       }\n//     });\n\n//     socketRef.current.on(\"invalidMove\", (msg) => {\n//       toast.error(msg);\n//     });\n\n//     socketRef.current.on(\"playersUpdate\", (data) => {\n//       setPlayers(data);\n//     });\n\n//     socketRef.current.on(\"gameStarted\", (status) => {\n//       setGameStarted(status);\n//     });\n\n//     return () => {\n//       socketRef.current.disconnect();\n//     };\n//   }, [roomId, navigate]);\n\n//   const checkGameStatus = () => {\n//     if (chessRef.current.isCheckmate()) {\n//       toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n//     } else if (chessRef.current.isStalemate()) {\n//       toast(\"Stalemate!\", { icon: \"🤝\" });\n//     } else if (chessRef.current.isCheck()) {\n//       toast(\"Check!\", { icon: \"⚠️\" });\n//     }\n//   };\n\n//   const onPieceDrop = () => {\n//     return false;\n//   };\n\n//   const onSquareClick = (square) => {\n//     if (!gameStarted) {\n//       toast.error(\"Opponent hasn't joined yet.\");\n//       return;\n//     }\n\n//     if (role !== turn) {\n//       toast.error(\"It's not your turn\");\n//       return;\n//     }\n\n//     if (!selectedSquare) {\n//       setSelectedSquare(square);\n//       onMouseOverSquare(square);\n//     } else {\n//       const move = {\n//         from: selectedSquare,\n//         to: square,\n//         promotion: \"q\",\n//       };\n\n//       try {\n//         const result = chessRef.current.move(move);\n//         if (result) {\n//           const newFen = chessRef.current.fen();\n//           setFen(newFen);\n//           setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//           socketRef.current.emit(\"chessMove\", {\n//             roomId,\n//             move,\n//             by: role,\n//             fen: newFen,\n//           });\n//           checkGameStatus();\n//         } else {\n//           toast.error(\"Invalid move\");\n//         }\n//       } catch {\n//         toast.error(\"Invalid move\");\n//       }\n\n//       setSelectedSquare(null);\n//       setHighlightSquares({});\n//     }\n//   };\n\n//   const onMouseOverSquare = (square) => {\n//     const moves = chessRef.current.moves({ square, verbose: true });\n//     if (moves.length === 0) {\n//       setHighlightSquares({});\n//       return;\n//     }\n\n//     const highlights = {};\n//     moves.forEach((m) => {\n//       highlights[m.to] = {\n//         background:\n//           chessRef.current.get(m.to) !== null\n//             ? \"radial-gradient(circle, rgba(255,0,0,0.6) 30%, transparent 30%)\"\n//             : \"radial-gradient(circle, rgba(0,255,0,0.5) 30%, transparent 30%)\",\n//       };\n//     });\n//     highlights[square] = {\n//       background: \"rgba(0, 0, 255, 0.2)\",\n//     };\n//     setHighlightSquares(highlights);\n//   };\n\n//   const onMouseOutSquare = () => {\n//     setHighlightSquares({});\n//   };\n\n//   return (\n//     <div className=\"room-container\">\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\n//       <div className=\"room-content\">\n//         <div className=\"status-panel\">\n//           <p>\n//             You are: <span className=\"bold-text\">{role || \"...\"}</span>\n//           </p>\n//           <p>\n//             Turn: <span className=\"bold-text\">{turn}</span>\n//           </p>\n//           <p>\n//             White:{\" \"}\n//             <span className=\"bold-text\">{players.white || \"Waiting...\"}</span>\n//           </p>\n//           <p>\n//             Black:{\" \"}\n//             <span className=\"bold-text\">{players.black || \"Waiting...\"}</span>\n//           </p>\n//         </div>\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\n//           <div className=\"chessboard-container\">\n//             <Chessboard\n//               position={fen === \"start\" ? undefined : fen}\n//               boardWidth={boardWidth}\n//               onSquareClick={onSquareClick}\n//               onMouseOverSquare={onMouseOverSquare}\n//               onMouseOutSquare={onMouseOutSquare}\n//               customSquareStyles={highlightSquares}\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\n//               transitionDuration={300}\n//               draggable={false}\n//             />\n//           </div>\n//         </div>\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Room;","map":{"version":3,"names":[],"sources":["C:/Users/krishan kant/Desktop/Js/game/frontend/src/components/Room.js"],"sourcesContent":["// import { Chessboard } from \"react-chessboard\";\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import io from \"socket.io-client\";\r\n// import Chat from \"./Chat\";\r\n// import { Chess } from \"chess.js\";\r\n// import \"./Room.css\";\r\n// import toast from \"react-hot-toast\";\r\n\r\n// // const SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n// const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\r\n\r\n// const Room = () => {\r\n//   const { roomId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const username = localStorage.getItem(\"username\") || \"\";\r\n//   const [role, setRole] = useState(null);\r\n//   const [turn, setTurn] = useState(\"white\");\r\n//   const [fen, setFen] = useState(\"start\");\r\n//   const [highlightSquares, setHighlightSquares] = useState({});\r\n//   const [boardWidth, setBoardWidth] = useState(400);\r\n//   const [selectedSquare, setSelectedSquare] = useState(null); // 👈 New state\r\n//   const socketRef = useRef(null);\r\n//   const chessRef = useRef(new Chess());\r\n//   const containerRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const calculateBoardWidth = () => {\r\n//       if (containerRef.current) {\r\n//         const containerWidth = containerRef.current.offsetWidth;\r\n//         const padding = 32;\r\n//         const maxWidth = Math.min(containerWidth - padding, 400);\r\n//         setBoardWidth(Math.max(maxWidth, 280));\r\n//       }\r\n//     };\r\n\r\n//     calculateBoardWidth();\r\n//     window.addEventListener(\"resize\", calculateBoardWidth);\r\n//     return () => window.removeEventListener(\"resize\", calculateBoardWidth);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!username) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     socketRef.current = io(SOCKET_SERVER_URL);\r\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n//       setRole(assignedRole);\r\n//     });\r\n\r\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n//       setTurn(newTurn);\r\n//     });\r\n\r\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n//       if (by !== role) {\r\n//         try {\r\n//           const result = chessRef.current.move(move);\r\n//           if (result) {\r\n//             setFen(chessRef.current.fen());\r\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//             checkGameStatus();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error applying move:\", error, move);\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     socketRef.current.on(\"invalidMove\", (msg) => {\r\n//       toast.error(msg);\r\n//     });\r\n\r\n//     return () => {\r\n//       socketRef.current.disconnect();\r\n//     };\r\n//   }, [roomId, navigate]);\r\n\r\n//   const checkGameStatus = () => {\r\n//     if (chessRef.current.isCheckmate()) {\r\n//       toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n//     } else if (chessRef.current.isStalemate()) {\r\n//       toast(\"Stalemate!\", { icon: \"🤝\" });\r\n//     } else if (chessRef.current.isCheck()) {\r\n//       toast(\"Check!\", { icon: \"⚠️\" });\r\n//     }\r\n//   };\r\n\r\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\r\n//     // Disabled since we use tap-to-move now\r\n//     return false;\r\n//   };\r\n\r\n//   const onSquareClick = (square) => {\r\n//     if (role !== turn) {\r\n//       toast.error(\"It's not your turn\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!selectedSquare) {\r\n//       setSelectedSquare(square);\r\n//       onMouseOverSquare(square); // optional: highlight options\r\n//     } else {\r\n//       const move = {\r\n//         from: selectedSquare,\r\n//         to: square,\r\n//         promotion: \"q\",\r\n//       };\r\n\r\n//       try {\r\n//         const result = chessRef.current.move(move);\r\n//         if (result) {\r\n//           setFen(chessRef.current.fen());\r\n//           setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//           socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\r\n//           checkGameStatus();\r\n//         } else {\r\n//           toast.error(\"Invalid move\");\r\n//         }\r\n//       } catch (e) {\r\n//         toast.error(\"Invalid move\");\r\n//       }\r\n\r\n//       setSelectedSquare(null);\r\n//       setHighlightSquares({});\r\n//     }\r\n//   };\r\n\r\n//   const onMouseOverSquare = (square) => {\r\n//     const moves = chessRef.current.moves({ square, verbose: true });\r\n//     if (moves.length === 0) {\r\n//       setHighlightSquares({});\r\n//       return;\r\n//     }\r\n\r\n//     const highlights = {};\r\n//     moves.forEach((m) => {\r\n//       highlights[m.to] = {\r\n//         background:\r\n//           chessRef.current.get(m.to) !== null\r\n//             ? \"rgba(255, 0, 0, 0.4)\"\r\n//             : \"rgba(0, 255, 0, 0.3)\",\r\n//       };\r\n//     });\r\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\r\n//     setHighlightSquares(highlights);\r\n//   };\r\n\r\n//   const onMouseOutSquare = () => {\r\n//     setHighlightSquares({});\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"room-container\">\r\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\r\n//       <div className=\"room-content\">\r\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n//           <div className=\"info-panel\">\r\n//             <p>\r\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n//             </p>\r\n//             <p>\r\n//               Turn: <span className=\"bold-text\">{turn}</span>\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"chessboard-container\">\r\n//             <Chessboard\r\n//               position={fen === \"start\" ? undefined : fen}\r\n//               boardWidth={boardWidth}\r\n//               onSquareClick={onSquareClick}\r\n//               onMouseOverSquare={onMouseOverSquare}\r\n//               onMouseOutSquare={onMouseOutSquare}\r\n//               customSquareStyles={highlightSquares}\r\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n//               transitionDuration={300}\r\n//               draggable={false} // 👈 Important: disable dragging\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Room;\r\n\r\n\r\n\r\n\r\n// import { Chessboard } from \"react-chessboard\";\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import io from \"socket.io-client\";\r\n// import Chat from \"./Chat\";\r\n// import { Chess } from \"chess.js\";\r\n// import \"./Room.css\";\r\n// import toast from \"react-hot-toast\";\r\n\r\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n// // const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\r\n\r\n// const Room = () => {\r\n//   const { roomId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const username = localStorage.getItem(\"username\") || \"\";\r\n//   const [role, setRole] = useState(null);\r\n//   const [turn, setTurn] = useState(\"white\");\r\n//   const [fen, setFen] = useState(\"start\");\r\n//   const [highlightSquares, setHighlightSquares] = useState({});\r\n//   const [boardWidth, setBoardWidth] = useState(400);\r\n//   const [selectedSquare, setSelectedSquare] = useState(null);\r\n//   const [players, setPlayers] = useState({ white: null, black: null });\r\n//   const [gameStarted, setGameStarted] = useState(false);\r\n//   const socketRef = useRef(null);\r\n//   const chessRef = useRef(new Chess());\r\n//   const containerRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const calculateBoardWidth = () => {\r\n//       if (containerRef.current) {\r\n//         const containerWidth = containerRef.current.offsetWidth;\r\n//         const padding = 32;\r\n//         const maxWidth = Math.min(containerWidth - padding, 400);\r\n//         setBoardWidth(Math.max(maxWidth, 280));\r\n//       }\r\n//     };\r\n\r\n//     calculateBoardWidth();\r\n//     window.addEventListener(\"resize\", calculateBoardWidth);\r\n//     return () => window.removeEventListener(\"resize\", calculateBoardWidth);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!username) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     socketRef.current = io(SOCKET_SERVER_URL);\r\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n//       setRole(assignedRole);\r\n//     });\r\n\r\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n//       setTurn(newTurn);\r\n//     });\r\n\r\n//     socketRef.current.on(\"fenUpdate\", (savedFen) => {\r\n//       if (savedFen && savedFen !== \"start\") {\r\n//         chessRef.current.load(savedFen);\r\n//         setFen(savedFen);\r\n//       }\r\n//     });\r\n\r\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n//       if (by !== role) {\r\n//         try {\r\n//           const result = chessRef.current.move(move);\r\n//           if (result) {\r\n//             setFen(chessRef.current.fen());\r\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//             checkGameStatus();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error applying move:\", error, move);\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     socketRef.current.on(\"invalidMove\", (msg) => {\r\n//       toast.error(msg);\r\n//     });\r\n\r\n//     socketRef.current.on(\"playersUpdate\", (data) => {\r\n//       setPlayers(data);\r\n//     });\r\n\r\n//     socketRef.current.on(\"gameStarted\", (status) => {\r\n//       setGameStarted(status);\r\n//     });\r\n\r\n//     return () => {\r\n//       socketRef.current.disconnect();\r\n//     };\r\n//   }, [roomId, navigate]);\r\n\r\n//   const checkGameStatus = () => {\r\n//     if (chessRef.current.isCheckmate()) {\r\n//       toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n//     } else if (chessRef.current.isStalemate()) {\r\n//       toast(\"Stalemate!\", { icon: \"🤝\" });\r\n//     } else if (chessRef.current.isCheck()) {\r\n//       toast(\"Check!\", { icon: \"⚠️\" });\r\n//     }\r\n//   };\r\n\r\n//   const onPieceDrop = () => {\r\n//     return false;\r\n//   };\r\n\r\n//   const onSquareClick = (square) => {\r\n//     if (!gameStarted) {\r\n//       toast.error(\"Opponent hasn't joined yet.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (role !== turn) {\r\n//       toast.error(\"It's not your turn\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!selectedSquare) {\r\n//       setSelectedSquare(square);\r\n//       onMouseOverSquare(square);\r\n//     } else {\r\n//       const move = {\r\n//         from: selectedSquare,\r\n//         to: square,\r\n//         promotion: \"q\",\r\n//       };\r\n\r\n//       try {\r\n//         const result = chessRef.current.move(move);\r\n//         if (result) {\r\n//           const newFen = chessRef.current.fen();\r\n//           setFen(newFen);\r\n//           setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//           socketRef.current.emit(\"chessMove\", {\r\n//             roomId,\r\n//             move,\r\n//             by: role,\r\n//             fen: newFen,\r\n//           });\r\n//           checkGameStatus();\r\n//         } else {\r\n//           toast.error(\"Invalid move\");\r\n//         }\r\n//       } catch {\r\n//         toast.error(\"Invalid move\");\r\n//       }\r\n\r\n//       setSelectedSquare(null);\r\n//       setHighlightSquares({});\r\n//     }\r\n//   };\r\n\r\n//   const onMouseOverSquare = (square) => {\r\n//     const moves = chessRef.current.moves({ square, verbose: true });\r\n//     if (moves.length === 0) {\r\n//       setHighlightSquares({});\r\n//       return;\r\n//     }\r\n\r\n//     const highlights = {};\r\n//     moves.forEach((m) => {\r\n//       highlights[m.to] = {\r\n//         background:\r\n//           chessRef.current.get(m.to) !== null\r\n//             ? \"radial-gradient(circle, rgba(255,0,0,0.6) 30%, transparent 30%)\"\r\n//             : \"radial-gradient(circle, rgba(0,255,0,0.5) 30%, transparent 30%)\",\r\n//       };\r\n//     });\r\n//     highlights[square] = {\r\n//       background: \"rgba(0, 0, 255, 0.2)\",\r\n//     };\r\n//     setHighlightSquares(highlights);\r\n//   };\r\n\r\n//   const onMouseOutSquare = () => {\r\n//     setHighlightSquares({});\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"room-container\">\r\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\r\n//       <div className=\"room-content\">\r\n//         <div className=\"status-panel\">\r\n//           <p>\r\n//             You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n//           </p>\r\n//           <p>\r\n//             Turn: <span className=\"bold-text\">{turn}</span>\r\n//           </p>\r\n//           <p>\r\n//             White:{\" \"}\r\n//             <span className=\"bold-text\">{players.white || \"Waiting...\"}</span>\r\n//           </p>\r\n//           <p>\r\n//             Black:{\" \"}\r\n//             <span className=\"bold-text\">{players.black || \"Waiting...\"}</span>\r\n//           </p>\r\n//         </div>\r\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n//           <div className=\"chessboard-container\">\r\n//             <Chessboard\r\n//               position={fen === \"start\" ? undefined : fen}\r\n//               boardWidth={boardWidth}\r\n//               onSquareClick={onSquareClick}\r\n//               onMouseOverSquare={onMouseOverSquare}\r\n//               onMouseOutSquare={onMouseOutSquare}\r\n//               customSquareStyles={highlightSquares}\r\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n//               transitionDuration={300}\r\n//               draggable={false}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Room;\r\n\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
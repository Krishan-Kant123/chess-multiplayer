{"ast":null,"code":"// import { Chessboard } from \"react-chessboard\";\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import io from \"socket.io-client\";\n// import Chat from \"./Chat\";\n// import { Chess } from \"chess.js\";\n// import \"./Room.css\"\n\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\n\n// const Room = () => {\n//   const { roomId } = useParams();\n//   const navigate = useNavigate();\n//   const username = localStorage.getItem(\"username\") || \"\";\n//   const [role, setRole] = useState(null);\n//   const [turn, setTurn] = useState(\"white\");\n//   const [fen, setFen] = useState(\"start\");\n//   const [highlightSquares, setHighlightSquares] = useState({});\n//   const [boardWidth, setBoardWidth] = useState(400);\n//   const socketRef = useRef(null);\n//   const chessRef = useRef(new Chess());\n//   const containerRef = useRef(null);\n\n//   // Calculate responsive board width\n//   useEffect(() => {\n//     const calculateBoardWidth = () => {\n//       if (containerRef.current) {\n//         const containerWidth = containerRef.current.offsetWidth;\n//         const padding = 32; // Account for container padding\n//         const maxWidth = Math.min(containerWidth - padding, 400);\n//         setBoardWidth(Math.max(maxWidth, 280)); // Minimum 280px width\n//       }\n//     };\n\n//     calculateBoardWidth();\n//     window.addEventListener('resize', calculateBoardWidth);\n\n//     return () => {\n//       window.removeEventListener('resize', calculateBoardWidth);\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     if (!username) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     socketRef.current = io(SOCKET_SERVER_URL);\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\n\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\n//       setRole(assignedRole);\n//     });\n\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\n//       setTurn(newTurn);\n//     });\n\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\n//       if (by !== role) {\n//         try {\n//           const result = chessRef.current.move(move);\n//           if (result) {\n//             setFen(chessRef.current.fen());\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//             checkGameStatus();\n//           }\n//         } catch (error) {\n//           console.error(\"Error applying move:\", error, move);\n//         }\n//       }\n//     });\n\n//     socketRef.current.on(\"invalidMove\", (msg) => {\n//       alert(msg);\n//     });\n\n//     return () => {\n//       socketRef.current.disconnect();\n//     };\n//   }, [roomId, username, navigate, role]);\n\n//   const checkGameStatus = () => {\n//     if (chessRef.current.isCheckmate()) {\n//       alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n//     } else if (chessRef.current.isStalemate()) {\n//       alert(\"Stalemate!\");\n//     } else if (chessRef.current.isCheck()) {\n//       alert(\"Check!\");\n//     }\n//   };\n\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\n//     if (role !== turn) {\n//       alert(\"It's not your turn\");\n//       return false;\n//     }\n\n//     const move = {\n//       from: sourceSquare,\n//       to: targetSquare,\n//       promotion: \"q\",\n//     };\n\n//     try {\n//       const result = chessRef.current.move(move);\n\n//       if (result) {\n//         setFen(chessRef.current.fen());\n//         setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//         socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\n//         checkGameStatus();\n//         return true;\n//       } else {\n//         alert(\"Invalid move\");\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error(\"Move error:\", error);\n//       alert(\"Invalid move\");\n//       return false;\n//     }\n//   };\n\n//   const onMouseOverSquare = (square) => {\n//     const moves = chessRef.current.moves({ square, verbose: true });\n//     if (moves.length === 0) {\n//       setHighlightSquares({});\n//       return;\n//     }\n\n//     const highlights = {};\n//     moves.forEach((m) => {\n//       highlights[m.to] = {\n//         background:\n//           chessRef.current.get(m.to) !== null\n//             ? \"rgba(255, 0, 0, 0.4)\"\n//             : \"rgba(0, 255, 0, 0.3)\",\n//       };\n//     });\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\n\n//     setHighlightSquares(highlights);\n//   };\n\n//   const onMouseOutSquare = () => {\n//     setHighlightSquares({});\n//   };\n\n//   return (\n//     <div className=\"room-container\">\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\n//       <div className=\"room-content\">\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\n//           <div className=\"info-panel\">\n//             <p>\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\n//             </p>\n//             <p>\n//               Turn: <span className=\"bold-text\">{turn}</span>\n//             </p>\n//           </div>\n//           <div className=\"chessboard-container\">\n//             <Chessboard\n//               position={fen === \"start\" ? undefined : fen}\n//               boardWidth={boardWidth}\n//               onPieceDrop={onPieceDrop}\n//               onMouseOverSquare={onMouseOverSquare}\n//               onMouseOutSquare={onMouseOutSquare}\n//               customSquareStyles={highlightSquares}\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\n//               transitionDuration={300}\n//               draggable={role === turn}\n//             />\n//           </div>\n//         </div>\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Room;\n\n// import { Chessboard } from \"react-chessboard\";\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import io from \"socket.io-client\";\n// import Chat from \"./Chat\";\n// import { Chess } from \"chess.js\";\n// import \"./Room.css\"\n\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\n\n// const Room = () => {\n//   const { roomId } = useParams();\n//   const navigate = useNavigate();\n//   const username = localStorage.getItem(\"username\") || \"\";\n//   const [role, setRole] = useState(null);\n//   const [turn, setTurn] = useState(\"white\");\n//   const [fen, setFen] = useState(\"start\");\n//   const [highlightSquares, setHighlightSquares] = useState({});\n//   const [boardWidth, setBoardWidth] = useState(400);\n//   const [players, setPlayers] = useState({ white: null, black: null });\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState(\"connecting\");\n//   const socketRef = useRef(null);\n//   const chessRef = useRef(new Chess());\n//   const containerRef = useRef(null);\n//   const reconnectAttempts = useRef(0);\n//   const maxReconnectAttempts = 5;\n\n//   // Calculate responsive board width\n//   useEffect(() => {\n//     const calculateBoardWidth = () => {\n//       if (containerRef.current) {\n//         const containerWidth = containerRef.current.offsetWidth;\n//         const padding = 32;\n//         const maxWidth = Math.min(containerWidth - padding, 400);\n//         setBoardWidth(Math.max(maxWidth, 280));\n//       }\n//     };\n\n//     calculateBoardWidth();\n//     window.addEventListener('resize', calculateBoardWidth);\n\n//     return () => {\n//       window.removeEventListener('resize', calculateBoardWidth);\n//     };\n//   }, []);\n\n//   // Socket connection management\n//   useEffect(() => {\n//     if (!username) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     // Prevent multiple connections\n//     if (socketRef.current) {\n//       return;\n//     }\n\n//     const connectSocket = () => {\n//       setConnectionStatus(\"connecting\");\n\n//       socketRef.current = io(SOCKET_SERVER_URL, {\n//         // Improved connection options\n//         transports: ['websocket', 'polling'],\n//         timeout: 20000,\n//         reconnection: true,\n//         reconnectionDelay: 1000,\n//         reconnectionDelayMax: 5000,\n//         reconnectionAttempts: maxReconnectAttempts,\n//         randomizationFactor: 0.5,\n//       });\n\n//       socketRef.current.on(\"connect\", () => {\n//         setConnectionStatus(\"connected\");\n//         reconnectAttempts.current = 0;\n//         console.log(\"Connected to server\");\n\n//         // Join room immediately after connection\n//         socketRef.current.emit(\"joinRoom\", { roomId, username });\n//       });\n\n//       socketRef.current.on(\"disconnect\", (reason) => {\n//         setConnectionStatus(\"disconnected\");\n//         console.log(\"Disconnected from server, reason:\", reason);\n\n//         // Don't try to reconnect for certain reasons\n//         if (reason === \"io client disconnect\") {\n//           console.log(\"Client initiated disconnect - not reconnecting\");\n//           return;\n//         }\n//       });\n\n//       socketRef.current.on(\"connect_error\", (error) => {\n//         console.log(\"Connection error:\", error);\n//         setConnectionStatus(\"error\");\n//         reconnectAttempts.current++;\n\n//         if (reconnectAttempts.current >= maxReconnectAttempts) {\n//           setConnectionStatus(\"failed\");\n//           alert(\"Failed to connect to server. Please refresh the page.\");\n//         }\n//       });\n\n//       socketRef.current.on(\"reconnect\", (attemptNumber) => {\n//         console.log(\"Reconnected after\", attemptNumber, \"attempts\");\n//         setConnectionStatus(\"connected\");\n//         // Re-join room after reconnection\n//         socketRef.current.emit(\"joinRoom\", { roomId, username });\n//       });\n\n//       socketRef.current.on(\"reconnect_error\", (error) => {\n//         console.log(\"Reconnection error:\", error);\n//       });\n\n//       socketRef.current.on(\"roleAssigned\", (assignedRole) => {\n//         console.log(\"Role assigned:\", assignedRole);\n//         setRole(assignedRole);\n//       });\n\n//       socketRef.current.on(\"turnUpdate\", (newTurn) => {\n//         console.log(\"Turn update:\", newTurn);\n//         setTurn(newTurn);\n//       });\n\n//       socketRef.current.on(\"playersUpdate\", (playersData) => {\n//         console.log(\"Players update:\", playersData);\n//         setPlayers(playersData);\n//       });\n\n//       socketRef.current.on(\"gameStarted\", (started) => {\n//         console.log(\"Game started:\", started);\n//         setGameStarted(started);\n//       });\n\n//       socketRef.current.on(\"chessMove\", ({ move, by }) => {\n//         console.log(\"Chess move received:\", move, \"by:\", by);\n//         if (by !== role) {\n//           try {\n//             const result = chessRef.current.move(move);\n//             if (result) {\n//               setFen(chessRef.current.fen());\n//               setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//               checkGameStatus();\n//             }\n//           } catch (error) {\n//             console.error(\"Error applying move:\", error, move);\n//           }\n//         }\n//       });\n\n//       socketRef.current.on(\"invalidMove\", (msg) => {\n//         alert(msg);\n//       });\n//     };\n\n//     connectSocket();\n\n//     return () => {\n//       if (socketRef.current) {\n//         socketRef.current.disconnect();\n//         socketRef.current = null;\n//       }\n//     };\n//   }, [roomId, username, navigate]);\n\n//   const checkGameStatus = () => {\n//     if (chessRef.current.isCheckmate()) {\n//       alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n//     } else if (chessRef.current.isStalemate()) {\n//       alert(\"Stalemate!\");\n//     } else if (chessRef.current.isCheck()) {\n//       alert(\"Check!\");\n//     }\n//   };\n\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\n//     if (connectionStatus !== \"connected\") {\n//       alert(\"Not connected to server\");\n//       return false;\n//     }\n\n//     if (role === \"viewer\") {\n//       alert(\"You are a viewer and cannot make moves\");\n//       return false;\n//     }\n\n//     if (role !== turn) {\n//       alert(\"It's not your turn\");\n//       return false;\n//     }\n\n//     if (!gameStarted) {\n//       alert(\"Waiting for another player to join\");\n//       return false;\n//     }\n\n//     const move = {\n//       from: sourceSquare,\n//       to: targetSquare,\n//       promotion: \"q\",\n//     };\n\n//     try {\n//       const result = chessRef.current.move(move);\n\n//       if (result) {\n//         setFen(chessRef.current.fen());\n//         setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//         socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\n//         checkGameStatus();\n//         return true;\n//       } else {\n//         alert(\"Invalid move\");\n//         return false;\n//       }\n//     } catch (error) {\n//       console.error(\"Move error:\", error);\n//       alert(\"Invalid move\");\n//       return false;\n//     }\n//   };\n\n//   const onMouseOverSquare = (square) => {\n//     if (role === \"viewer\" || role !== turn || !gameStarted || connectionStatus !== \"connected\") {\n//       return;\n//     }\n\n//     const moves = chessRef.current.moves({ square, verbose: true });\n//     if (moves.length === 0) {\n//       setHighlightSquares({});\n//       return;\n//     }\n\n//     const highlights = {};\n//     moves.forEach((m) => {\n//       highlights[m.to] = {\n//         background:\n//           chessRef.current.get(m.to) !== null\n//             ? \"rgba(255, 0, 0, 0.4)\"\n//             : \"rgba(0, 255, 0, 0.3)\",\n//       };\n//     });\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\n\n//     setHighlightSquares(highlights);\n//   };\n\n//   const onMouseOutSquare = () => {\n//     setHighlightSquares({});\n//   };\n\n//   const getStatusMessage = () => {\n//     if (connectionStatus === \"connecting\") {\n//       return \"Connecting to server...\";\n//     }\n//     if (connectionStatus === \"disconnected\") {\n//       return \"Disconnected - trying to reconnect...\";\n//     }\n//     if (connectionStatus === \"error\") {\n//       return \"Connection error - retrying...\";\n//     }\n//     if (connectionStatus === \"failed\") {\n//       return \"Connection failed - please refresh\";\n//     }\n//     if (connectionStatus !== \"connected\") {\n//       return `Connection: ${connectionStatus}`;\n//     }\n//     if (!gameStarted) {\n//       return `Waiting for ${!players.white ? 'white' : 'black'} player...`;\n//     }\n//     if (role === \"viewer\") {\n//       return \"You are viewing the game\";\n//     }\n//     return `${turn}'s turn`;\n//   };\n\n//   const getConnectionStatusColor = () => {\n//     switch (connectionStatus) {\n//       case \"connected\": return \"green\";\n//       case \"connecting\": return \"orange\";\n//       case \"disconnected\": return \"red\";\n//       case \"error\": return \"red\";\n//       case \"failed\": return \"darkred\";\n//       default: return \"gray\";\n//     }\n//   };\n\n//   return (\n//     <div className=\"room-container\">\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\n//       <div className=\"room-content\">\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\n//           <div className=\"info-panel\">\n//             <p>\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\n//             </p>\n//             <p>\n//               Status: <span className=\"bold-text\" style={{color: getConnectionStatusColor()}}>{getStatusMessage()}</span>\n//             </p>\n//             <div className=\"players-info\">\n//               <p>White: {players.white || \"Waiting...\"}</p>\n//               <p>Black: {players.black || \"Waiting...\"}</p>\n//             </div>\n//           </div>\n//           <div className=\"chessboard-container\">\n//             <Chessboard\n//               position={fen === \"start\" ? undefined : fen}\n//               boardWidth={boardWidth}\n//               onPieceDrop={onPieceDrop}\n//               onMouseOverSquare={onMouseOverSquare}\n//               onMouseOutSquare={onMouseOutSquare}\n//               customSquareStyles={highlightSquares}\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\n//               transitionDuration={300}\n//               draggable={role !== \"viewer\" && role === turn && gameStarted && connectionStatus === \"connected\"}\n//             />\n//           </div>\n//         </div>\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Room;","map":{"version":3,"names":[],"sources":["C:/Users/krishan kant/Desktop/Js/game/frontend/src/components/Room.js"],"sourcesContent":["// import { Chessboard } from \"react-chessboard\";\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import io from \"socket.io-client\";\r\n// import Chat from \"./Chat\";\r\n// import { Chess } from \"chess.js\";\r\n// import \"./Room.css\"\r\n\r\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\n// const Room = () => {\r\n//   const { roomId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const username = localStorage.getItem(\"username\") || \"\";\r\n//   const [role, setRole] = useState(null);\r\n//   const [turn, setTurn] = useState(\"white\");\r\n//   const [fen, setFen] = useState(\"start\");\r\n//   const [highlightSquares, setHighlightSquares] = useState({});\r\n//   const [boardWidth, setBoardWidth] = useState(400);\r\n//   const socketRef = useRef(null);\r\n//   const chessRef = useRef(new Chess());\r\n//   const containerRef = useRef(null);\r\n\r\n//   // Calculate responsive board width\r\n//   useEffect(() => {\r\n//     const calculateBoardWidth = () => {\r\n//       if (containerRef.current) {\r\n//         const containerWidth = containerRef.current.offsetWidth;\r\n//         const padding = 32; // Account for container padding\r\n//         const maxWidth = Math.min(containerWidth - padding, 400);\r\n//         setBoardWidth(Math.max(maxWidth, 280)); // Minimum 280px width\r\n//       }\r\n//     };\r\n\r\n//     calculateBoardWidth();\r\n//     window.addEventListener('resize', calculateBoardWidth);\r\n    \r\n//     return () => {\r\n//       window.removeEventListener('resize', calculateBoardWidth);\r\n//     };\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!username) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     socketRef.current = io(SOCKET_SERVER_URL);\r\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n//       setRole(assignedRole);\r\n//     });\r\n\r\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n//       setTurn(newTurn);\r\n//     });\r\n\r\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n//       if (by !== role) {\r\n//         try {\r\n//           const result = chessRef.current.move(move);\r\n//           if (result) {\r\n//             setFen(chessRef.current.fen());\r\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//             checkGameStatus();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error applying move:\", error, move);\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     socketRef.current.on(\"invalidMove\", (msg) => {\r\n//       alert(msg);\r\n//     });\r\n\r\n//     return () => {\r\n//       socketRef.current.disconnect();\r\n//     };\r\n//   }, [roomId, username, navigate, role]);\r\n\r\n//   const checkGameStatus = () => {\r\n//     if (chessRef.current.isCheckmate()) {\r\n//       alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n//     } else if (chessRef.current.isStalemate()) {\r\n//       alert(\"Stalemate!\");\r\n//     } else if (chessRef.current.isCheck()) {\r\n//       alert(\"Check!\");\r\n//     }\r\n//   };\r\n\r\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\r\n//     if (role !== turn) {\r\n//       alert(\"It's not your turn\");\r\n//       return false;\r\n//     }\r\n\r\n//     const move = {\r\n//       from: sourceSquare,\r\n//       to: targetSquare,\r\n//       promotion: \"q\",\r\n//     };\r\n\r\n//     try {\r\n//       const result = chessRef.current.move(move);\r\n\r\n//       if (result) {\r\n//         setFen(chessRef.current.fen());\r\n//         setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//         socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\r\n//         checkGameStatus();\r\n//         return true;\r\n//       } else {\r\n//         alert(\"Invalid move\");\r\n//         return false;\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Move error:\", error);\r\n//       alert(\"Invalid move\");\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const onMouseOverSquare = (square) => {\r\n//     const moves = chessRef.current.moves({ square, verbose: true });\r\n//     if (moves.length === 0) {\r\n//       setHighlightSquares({});\r\n//       return;\r\n//     }\r\n\r\n//     const highlights = {};\r\n//     moves.forEach((m) => {\r\n//       highlights[m.to] = {\r\n//         background:\r\n//           chessRef.current.get(m.to) !== null\r\n//             ? \"rgba(255, 0, 0, 0.4)\"\r\n//             : \"rgba(0, 255, 0, 0.3)\",\r\n//       };\r\n//     });\r\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\r\n\r\n//     setHighlightSquares(highlights);\r\n//   };\r\n\r\n//   const onMouseOutSquare = () => {\r\n//     setHighlightSquares({});\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"room-container\">\r\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\r\n//       <div className=\"room-content\">\r\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n//           <div className=\"info-panel\">\r\n//             <p>\r\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n//             </p>\r\n//             <p>\r\n//               Turn: <span className=\"bold-text\">{turn}</span>\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"chessboard-container\">\r\n//             <Chessboard\r\n//               position={fen === \"start\" ? undefined : fen}\r\n//               boardWidth={boardWidth}\r\n//               onPieceDrop={onPieceDrop}\r\n//               onMouseOverSquare={onMouseOverSquare}\r\n//               onMouseOutSquare={onMouseOutSquare}\r\n//               customSquareStyles={highlightSquares}\r\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n//               transitionDuration={300}\r\n//               draggable={role === turn}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Room;\r\n\r\n\r\n// import { Chessboard } from \"react-chessboard\";\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import io from \"socket.io-client\";\r\n// import Chat from \"./Chat\";\r\n// import { Chess } from \"chess.js\";\r\n// import \"./Room.css\"\r\n\r\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\n// const Room = () => {\r\n//   const { roomId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const username = localStorage.getItem(\"username\") || \"\";\r\n//   const [role, setRole] = useState(null);\r\n//   const [turn, setTurn] = useState(\"white\");\r\n//   const [fen, setFen] = useState(\"start\");\r\n//   const [highlightSquares, setHighlightSquares] = useState({});\r\n//   const [boardWidth, setBoardWidth] = useState(400);\r\n//   const [players, setPlayers] = useState({ white: null, black: null });\r\n//   const [gameStarted, setGameStarted] = useState(false);\r\n//   const [connectionStatus, setConnectionStatus] = useState(\"connecting\");\r\n//   const socketRef = useRef(null);\r\n//   const chessRef = useRef(new Chess());\r\n//   const containerRef = useRef(null);\r\n//   const reconnectAttempts = useRef(0);\r\n//   const maxReconnectAttempts = 5;\r\n\r\n//   // Calculate responsive board width\r\n//   useEffect(() => {\r\n//     const calculateBoardWidth = () => {\r\n//       if (containerRef.current) {\r\n//         const containerWidth = containerRef.current.offsetWidth;\r\n//         const padding = 32;\r\n//         const maxWidth = Math.min(containerWidth - padding, 400);\r\n//         setBoardWidth(Math.max(maxWidth, 280));\r\n//       }\r\n//     };\r\n\r\n//     calculateBoardWidth();\r\n//     window.addEventListener('resize', calculateBoardWidth);\r\n    \r\n//     return () => {\r\n//       window.removeEventListener('resize', calculateBoardWidth);\r\n//     };\r\n//   }, []);\r\n\r\n//   // Socket connection management\r\n//   useEffect(() => {\r\n//     if (!username) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     // Prevent multiple connections\r\n//     if (socketRef.current) {\r\n//       return;\r\n//     }\r\n\r\n//     const connectSocket = () => {\r\n//       setConnectionStatus(\"connecting\");\r\n\r\n//       socketRef.current = io(SOCKET_SERVER_URL, {\r\n//         // Improved connection options\r\n//         transports: ['websocket', 'polling'],\r\n//         timeout: 20000,\r\n//         reconnection: true,\r\n//         reconnectionDelay: 1000,\r\n//         reconnectionDelayMax: 5000,\r\n//         reconnectionAttempts: maxReconnectAttempts,\r\n//         randomizationFactor: 0.5,\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect\", () => {\r\n//         setConnectionStatus(\"connected\");\r\n//         reconnectAttempts.current = 0;\r\n//         console.log(\"Connected to server\");\r\n        \r\n//         // Join room immediately after connection\r\n//         socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n//       });\r\n\r\n//       socketRef.current.on(\"disconnect\", (reason) => {\r\n//         setConnectionStatus(\"disconnected\");\r\n//         console.log(\"Disconnected from server, reason:\", reason);\r\n        \r\n//         // Don't try to reconnect for certain reasons\r\n//         if (reason === \"io client disconnect\") {\r\n//           console.log(\"Client initiated disconnect - not reconnecting\");\r\n//           return;\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"connect_error\", (error) => {\r\n//         console.log(\"Connection error:\", error);\r\n//         setConnectionStatus(\"error\");\r\n//         reconnectAttempts.current++;\r\n        \r\n//         if (reconnectAttempts.current >= maxReconnectAttempts) {\r\n//           setConnectionStatus(\"failed\");\r\n//           alert(\"Failed to connect to server. Please refresh the page.\");\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"reconnect\", (attemptNumber) => {\r\n//         console.log(\"Reconnected after\", attemptNumber, \"attempts\");\r\n//         setConnectionStatus(\"connected\");\r\n//         // Re-join room after reconnection\r\n//         socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n//       });\r\n\r\n//       socketRef.current.on(\"reconnect_error\", (error) => {\r\n//         console.log(\"Reconnection error:\", error);\r\n//       });\r\n\r\n//       socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n//         console.log(\"Role assigned:\", assignedRole);\r\n//         setRole(assignedRole);\r\n//       });\r\n\r\n//       socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n//         console.log(\"Turn update:\", newTurn);\r\n//         setTurn(newTurn);\r\n//       });\r\n\r\n//       socketRef.current.on(\"playersUpdate\", (playersData) => {\r\n//         console.log(\"Players update:\", playersData);\r\n//         setPlayers(playersData);\r\n//       });\r\n\r\n//       socketRef.current.on(\"gameStarted\", (started) => {\r\n//         console.log(\"Game started:\", started);\r\n//         setGameStarted(started);\r\n//       });\r\n\r\n//       socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n//         console.log(\"Chess move received:\", move, \"by:\", by);\r\n//         if (by !== role) {\r\n//           try {\r\n//             const result = chessRef.current.move(move);\r\n//             if (result) {\r\n//               setFen(chessRef.current.fen());\r\n//               setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//               checkGameStatus();\r\n//             }\r\n//           } catch (error) {\r\n//             console.error(\"Error applying move:\", error, move);\r\n//           }\r\n//         }\r\n//       });\r\n\r\n//       socketRef.current.on(\"invalidMove\", (msg) => {\r\n//         alert(msg);\r\n//       });\r\n//     };\r\n\r\n//     connectSocket();\r\n\r\n//     return () => {\r\n//       if (socketRef.current) {\r\n//         socketRef.current.disconnect();\r\n//         socketRef.current = null;\r\n//       }\r\n//     };\r\n//   }, [roomId, username, navigate]);\r\n\r\n//   const checkGameStatus = () => {\r\n//     if (chessRef.current.isCheckmate()) {\r\n//       alert(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n//     } else if (chessRef.current.isStalemate()) {\r\n//       alert(\"Stalemate!\");\r\n//     } else if (chessRef.current.isCheck()) {\r\n//       alert(\"Check!\");\r\n//     }\r\n//   };\r\n\r\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\r\n//     if (connectionStatus !== \"connected\") {\r\n//       alert(\"Not connected to server\");\r\n//       return false;\r\n//     }\r\n\r\n//     if (role === \"viewer\") {\r\n//       alert(\"You are a viewer and cannot make moves\");\r\n//       return false;\r\n//     }\r\n\r\n//     if (role !== turn) {\r\n//       alert(\"It's not your turn\");\r\n//       return false;\r\n//     }\r\n\r\n//     if (!gameStarted) {\r\n//       alert(\"Waiting for another player to join\");\r\n//       return false;\r\n//     }\r\n\r\n//     const move = {\r\n//       from: sourceSquare,\r\n//       to: targetSquare,\r\n//       promotion: \"q\",\r\n//     };\r\n\r\n//     try {\r\n//       const result = chessRef.current.move(move);\r\n\r\n//       if (result) {\r\n//         setFen(chessRef.current.fen());\r\n//         setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//         socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\r\n//         checkGameStatus();\r\n//         return true;\r\n//       } else {\r\n//         alert(\"Invalid move\");\r\n//         return false;\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Move error:\", error);\r\n//       alert(\"Invalid move\");\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   const onMouseOverSquare = (square) => {\r\n//     if (role === \"viewer\" || role !== turn || !gameStarted || connectionStatus !== \"connected\") {\r\n//       return;\r\n//     }\r\n\r\n//     const moves = chessRef.current.moves({ square, verbose: true });\r\n//     if (moves.length === 0) {\r\n//       setHighlightSquares({});\r\n//       return;\r\n//     }\r\n\r\n//     const highlights = {};\r\n//     moves.forEach((m) => {\r\n//       highlights[m.to] = {\r\n//         background:\r\n//           chessRef.current.get(m.to) !== null\r\n//             ? \"rgba(255, 0, 0, 0.4)\"\r\n//             : \"rgba(0, 255, 0, 0.3)\",\r\n//       };\r\n//     });\r\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\r\n\r\n//     setHighlightSquares(highlights);\r\n//   };\r\n\r\n//   const onMouseOutSquare = () => {\r\n//     setHighlightSquares({});\r\n//   };\r\n\r\n//   const getStatusMessage = () => {\r\n//     if (connectionStatus === \"connecting\") {\r\n//       return \"Connecting to server...\";\r\n//     }\r\n//     if (connectionStatus === \"disconnected\") {\r\n//       return \"Disconnected - trying to reconnect...\";\r\n//     }\r\n//     if (connectionStatus === \"error\") {\r\n//       return \"Connection error - retrying...\";\r\n//     }\r\n//     if (connectionStatus === \"failed\") {\r\n//       return \"Connection failed - please refresh\";\r\n//     }\r\n//     if (connectionStatus !== \"connected\") {\r\n//       return `Connection: ${connectionStatus}`;\r\n//     }\r\n//     if (!gameStarted) {\r\n//       return `Waiting for ${!players.white ? 'white' : 'black'} player...`;\r\n//     }\r\n//     if (role === \"viewer\") {\r\n//       return \"You are viewing the game\";\r\n//     }\r\n//     return `${turn}'s turn`;\r\n//   };\r\n\r\n//   const getConnectionStatusColor = () => {\r\n//     switch (connectionStatus) {\r\n//       case \"connected\": return \"green\";\r\n//       case \"connecting\": return \"orange\";\r\n//       case \"disconnected\": return \"red\";\r\n//       case \"error\": return \"red\";\r\n//       case \"failed\": return \"darkred\";\r\n//       default: return \"gray\";\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"room-container\">\r\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\r\n//       <div className=\"room-content\">\r\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n//           <div className=\"info-panel\">\r\n//             <p>\r\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n//             </p>\r\n//             <p>\r\n//               Status: <span className=\"bold-text\" style={{color: getConnectionStatusColor()}}>{getStatusMessage()}</span>\r\n//             </p>\r\n//             <div className=\"players-info\">\r\n//               <p>White: {players.white || \"Waiting...\"}</p>\r\n//               <p>Black: {players.black || \"Waiting...\"}</p>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"chessboard-container\">\r\n//             <Chessboard\r\n//               position={fen === \"start\" ? undefined : fen}\r\n//               boardWidth={boardWidth}\r\n//               onPieceDrop={onPieceDrop}\r\n//               onMouseOverSquare={onMouseOverSquare}\r\n//               onMouseOutSquare={onMouseOutSquare}\r\n//               customSquareStyles={highlightSquares}\r\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n//               transitionDuration={300}\r\n//               draggable={role !== \"viewer\" && role === turn && gameStarted && connectionStatus === \"connected\"}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Room;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
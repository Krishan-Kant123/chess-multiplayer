{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krishan kant\\\\Desktop\\\\Js\\\\game\\\\frontend\\\\src\\\\components\\\\Room.js\",\n  _s = $RefreshSig$();\n// src/components/Room.js\nimport { Chessboard } from \"react-chessboard\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport Chat from \"./Chat\";\nimport { Chess } from \"chess.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\nconst Room = () => {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Generate unique username if not exists\n  const getOrCreateUsername = () => {\n    let username = localStorage.getItem(\"username\");\n    if (!username || username.trim() === \"\") {\n      username = `Player_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\n      localStorage.setItem(\"username\", username);\n    }\n    return username;\n  };\n  const username = getOrCreateUsername();\n  const [role, setRole] = useState(null);\n  const [players, setPlayers] = useState({\n    white: null,\n    black: null\n  });\n  const [turn, setTurn] = useState(\"white\");\n  const [fen, setFen] = useState(\"start\");\n  const [highlightSquares, setHighlightSquares] = useState({});\n  const [connectionStatus, setConnectionStatus] = useState(\"connecting\");\n  const [gameStatus, setGameStatus] = useState(\"waiting\"); // waiting, active, finished\n  const socketRef = useRef(null);\n  const chessRef = useRef(new Chess());\n  useEffect(() => {\n    if (!username) {\n      navigate(\"/\");\n      return;\n    }\n\n    // Initialize socket connection\n    socketRef.current = io(SOCKET_SERVER_URL, {\n      transports: ['websocket', 'polling']\n    });\n    const socket = socketRef.current;\n\n    // Connection events\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to server\");\n      setConnectionStatus(\"connected\");\n      socket.emit(\"joinRoom\", {\n        roomId,\n        username\n      });\n    });\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from server\");\n      setConnectionStatus(\"disconnected\");\n    });\n    socket.on(\"connect_error\", error => {\n      console.error(\"Connection error:\", error);\n      setConnectionStatus(\"error\");\n    });\n\n    // Game events\n    socket.on(\"roleAssigned\", assignedRole => {\n      console.log(\"Role assigned:\", assignedRole);\n      setRole(assignedRole);\n    });\n    socket.on(\"playersUpdate\", playersData => {\n      console.log(\"Players update:\", playersData);\n      setPlayers(playersData);\n\n      // Check if both players are present\n      if (playersData.white && playersData.black) {\n        setGameStatus(\"active\");\n      } else {\n        setGameStatus(\"waiting\");\n      }\n    });\n    socket.on(\"gameReady\", message => {\n      console.log(\"Game ready:\", message);\n      setGameStatus(\"active\");\n    });\n    socket.on(\"chessMove\", ({\n      move,\n      by\n    }) => {\n      console.log(\"Received move:\", move, \"by:\", by);\n\n      // Only apply the move if it's from the other player\n      if (by !== role) {\n        try {\n          const result = chessRef.current.move(move);\n          if (result) {\n            setFen(chessRef.current.fen());\n            // Update turn after opponent's move\n            const newTurn = chessRef.current.turn() === 'w' ? 'white' : 'black';\n            setTurn(newTurn);\n            checkGameStatus();\n          } else {\n            console.error(\"Invalid move received:\", move);\n          }\n        } catch (error) {\n          console.error(\"Error applying move:\", error, move);\n        }\n      }\n    });\n    socket.on(\"turnUpdate\", newTurn => {\n      console.log(\"Turn update:\", newTurn);\n      setTurn(newTurn);\n    });\n    socket.on(\"gameStateUpdate\", gameState => {\n      console.log(\"Game state update:\", gameState);\n      if (gameState.fen && gameState.fen !== \"start\") {\n        chessRef.current.load(gameState.fen);\n        setFen(gameState.fen);\n      }\n      if (gameState.turn) {\n        setTurn(gameState.turn);\n      }\n    });\n\n    // Error events\n    socket.on(\"invalidMove\", msg => {\n      alert(msg);\n    });\n    socket.on(\"roomFull\", msg => {\n      alert(msg);\n      navigate(\"/\");\n    });\n    socket.on(\"usernameAlreadyTaken\", msg => {\n      alert(msg);\n      // Generate new username and try again\n      const newUsername = `Player_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\n      localStorage.setItem(\"username\", newUsername);\n      window.location.reload();\n    });\n    socket.on(\"playerDisconnected\", ({\n      username: disconnectedUser,\n      role: disconnectedRole\n    }) => {\n      console.log(`${disconnectedUser} (${disconnectedRole}) disconnected`);\n      setGameStatus(\"waiting\");\n    });\n    socket.on(\"error\", msg => {\n      console.error(\"Socket error:\", msg);\n      alert(msg);\n    });\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.emit(\"leaveRoom\", {\n          roomId\n        });\n        socketRef.current.disconnect();\n      }\n    };\n  }, [roomId, username, navigate, role]);\n  const checkGameStatus = () => {\n    if (chessRef.current.isCheckmate()) {\n      const winner = chessRef.current.turn() === 'w' ? 'Black' : 'White';\n      alert(`Checkmate! ${winner} wins.`);\n      setGameStatus(\"finished\");\n    } else if (chessRef.current.isStalemate()) {\n      alert(\"Stalemate! Game is a draw.\");\n      setGameStatus(\"finished\");\n    } else if (chessRef.current.isDraw()) {\n      alert(\"Draw!\");\n      setGameStatus(\"finished\");\n    } else if (chessRef.current.isCheck()) {\n      alert(\"Check!\");\n    }\n  };\n  const onPieceDrop = (sourceSquare, targetSquare) => {\n    // Check if it's the player's turn\n    if (role !== turn) {\n      alert(\"It's not your turn\");\n      return false;\n    }\n\n    // Check if game is active\n    if (gameStatus !== \"active\") {\n      alert(\"Game is not active\");\n      return false;\n    }\n\n    // Check connection\n    if (connectionStatus !== \"connected\") {\n      alert(\"Not connected to server\");\n      return false;\n    }\n    const move = {\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\" // Always promote to queen for simplicity\n    };\n    try {\n      // Try the move locally first\n      const gameCopy = new Chess(chessRef.current.fen());\n      const result = gameCopy.move(move);\n      if (result) {\n        // Apply the move to our local game state\n        chessRef.current.move(move);\n        setFen(chessRef.current.fen());\n\n        // Update turn\n        const newTurn = chessRef.current.turn() === 'w' ? 'white' : 'black';\n        setTurn(newTurn);\n\n        // Send move to server\n        socketRef.current.emit(\"chessMove\", {\n          roomId,\n          move,\n          by: role\n        });\n\n        // Check game status\n        checkGameStatus();\n        return true;\n      } else {\n        alert(\"Invalid move\");\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Move error:\", error);\n      alert(\"Invalid move\");\n      return false;\n    }\n  };\n  const onMouseOverSquare = square => {\n    // Only show highlights if it's the player's turn\n    if (role !== turn || gameStatus !== \"active\") {\n      setHighlightSquares({});\n      return;\n    }\n    const moves = chessRef.current.moves({\n      square,\n      verbose: true\n    });\n    if (moves.length === 0) {\n      setHighlightSquares({});\n      return;\n    }\n    const highlights = {};\n    moves.forEach(m => {\n      highlights[m.to] = {\n        background: chessRef.current.get(m.to) !== null ? \"rgba(255, 0, 0, 0.4)\" // Capture\n        : \"rgba(0, 255, 0, 0.3)\" // Move\n      };\n    });\n    highlights[square] = {\n      background: \"rgba(0, 0, 255, 0.3)\"\n    }; // Selected square\n\n    setHighlightSquares(highlights);\n  };\n  const onMouseOutSquare = () => {\n    setHighlightSquares({});\n  };\n  const getStatusMessage = () => {\n    if (connectionStatus !== \"connected\") {\n      return `Connection: ${connectionStatus}`;\n    }\n    if (gameStatus === \"waiting\") {\n      return \"Waiting for players...\";\n    }\n    if (gameStatus === \"finished\") {\n      return \"Game finished\";\n    }\n    return `Turn: ${turn}`;\n  };\n  const canPlayMove = () => {\n    return connectionStatus === \"connected\" && gameStatus === \"active\" && role === turn && players.white && players.black;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col bg-gray-900 text-white p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-2\",\n        children: [\"Chess Room: \", roomId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-sm text-gray-300\",\n        children: [\"Status: \", getStatusMessage()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-row gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 p-4 bg-gray-800 rounded-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-gray-400\",\n              children: \"You are: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-bold text-yellow-400\",\n              children: role || \"Waiting for assignment...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-gray-400\",\n              children: \"Current turn: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `font-bold ${turn === 'white' ? 'text-white' : 'text-gray-600'}`,\n              children: turn\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-gray-400\",\n              children: \"Players:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"ml-4 mt-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-2 h-2 bg-white rounded-full mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 19\n                }, this), \"White: \", players.white || \"Waiting...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-2 h-2 bg-gray-600 rounded-full mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 19\n                }, this), \"Black: \", players.black || \"Waiting...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), gameStatus === \"waiting\" && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-yellow-400 text-sm\",\n            children: [\"Waiting for \", !players.white ? \"white\" : \"black\", \" player...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n            position: fen === \"start\" ? undefined : fen,\n            onPieceDrop: onPieceDrop,\n            onMouseOverSquare: onMouseOverSquare,\n            onMouseOutSquare: onMouseOutSquare,\n            customSquareStyles: highlightSquares,\n            boardOrientation: role === \"white\" ? \"white\" : \"black\",\n            transitionDuration: 300,\n            calcWidth: ({\n              screenWidth\n            }) => Math.min(500, screenWidth * 0.7),\n            draggable: canPlayMove()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), !canPlayMove() && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center rounded\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-white text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-lg font-bold\",\n                children: connectionStatus !== \"connected\" ? \"Disconnected\" : gameStatus === \"waiting\" ? \"Waiting for players\" : role !== turn ? \"Opponent's turn\" : \"Game not ready\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        socket: socketRef.current,\n        roomId: roomId,\n        username: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n};\n_s(Room, \"aXb0uRHuqHK4plALQTZRlVDTJfM=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["Chessboard","React","useEffect","useState","useRef","useParams","useNavigate","io","Chat","Chess","jsxDEV","_jsxDEV","SOCKET_SERVER_URL","Room","_s","roomId","navigate","getOrCreateUsername","username","localStorage","getItem","trim","Date","now","Math","random","toString","substr","setItem","role","setRole","players","setPlayers","white","black","turn","setTurn","fen","setFen","highlightSquares","setHighlightSquares","connectionStatus","setConnectionStatus","gameStatus","setGameStatus","socketRef","chessRef","current","transports","socket","on","console","log","emit","error","assignedRole","playersData","message","move","by","result","newTurn","checkGameStatus","gameState","load","msg","alert","newUsername","window","location","reload","disconnectedUser","disconnectedRole","disconnect","isCheckmate","winner","isStalemate","isDraw","isCheck","onPieceDrop","sourceSquare","targetSquare","from","to","promotion","gameCopy","onMouseOverSquare","square","moves","verbose","length","highlights","forEach","m","background","get","onMouseOutSquare","getStatusMessage","canPlayMove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","position","undefined","customSquareStyles","boardOrientation","transitionDuration","calcWidth","screenWidth","min","draggable","_c","$RefreshReg$"],"sources":["C:/Users/krishan kant/Desktop/Js/game/frontend/src/components/Room.js"],"sourcesContent":["// src/components/Room.js\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport Chat from \"./Chat\";\r\nimport { Chess } from \"chess.js\";\r\n\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\nconst Room = () => {\r\n  const { roomId } = useParams();\r\n  const navigate = useNavigate();\r\n  \r\n  // Generate unique username if not exists\r\n  const getOrCreateUsername = () => {\r\n    let username = localStorage.getItem(\"username\");\r\n    if (!username || username.trim() === \"\") {\r\n      username = `Player_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\r\n      localStorage.setItem(\"username\", username);\r\n    }\r\n    return username;\r\n  };\r\n\r\n  const username = getOrCreateUsername();\r\n  const [role, setRole] = useState(null);\r\n  const [players, setPlayers] = useState({ white: null, black: null });\r\n  const [turn, setTurn] = useState(\"white\");\r\n  const [fen, setFen] = useState(\"start\");\r\n  const [highlightSquares, setHighlightSquares] = useState({});\r\n  const [connectionStatus, setConnectionStatus] = useState(\"connecting\");\r\n  const [gameStatus, setGameStatus] = useState(\"waiting\"); // waiting, active, finished\r\n  const socketRef = useRef(null);\r\n  const chessRef = useRef(new Chess());\r\n\r\n  useEffect(() => {\r\n    if (!username) {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    // Initialize socket connection\r\n    socketRef.current = io(SOCKET_SERVER_URL, {\r\n      transports: ['websocket', 'polling']\r\n    });\r\n\r\n    const socket = socketRef.current;\r\n\r\n    // Connection events\r\n    socket.on(\"connect\", () => {\r\n      console.log(\"Connected to server\");\r\n      setConnectionStatus(\"connected\");\r\n      socket.emit(\"joinRoom\", { roomId, username });\r\n    });\r\n\r\n    socket.on(\"disconnect\", () => {\r\n      console.log(\"Disconnected from server\");\r\n      setConnectionStatus(\"disconnected\");\r\n    });\r\n\r\n    socket.on(\"connect_error\", (error) => {\r\n      console.error(\"Connection error:\", error);\r\n      setConnectionStatus(\"error\");\r\n    });\r\n\r\n    // Game events\r\n    socket.on(\"roleAssigned\", (assignedRole) => {\r\n      console.log(\"Role assigned:\", assignedRole);\r\n      setRole(assignedRole);\r\n    });\r\n\r\n    socket.on(\"playersUpdate\", (playersData) => {\r\n      console.log(\"Players update:\", playersData);\r\n      setPlayers(playersData);\r\n      \r\n      // Check if both players are present\r\n      if (playersData.white && playersData.black) {\r\n        setGameStatus(\"active\");\r\n      } else {\r\n        setGameStatus(\"waiting\");\r\n      }\r\n    });\r\n\r\n    socket.on(\"gameReady\", (message) => {\r\n      console.log(\"Game ready:\", message);\r\n      setGameStatus(\"active\");\r\n    });\r\n\r\n    socket.on(\"chessMove\", ({ move, by }) => {\r\n      console.log(\"Received move:\", move, \"by:\", by);\r\n      \r\n      // Only apply the move if it's from the other player\r\n      if (by !== role) {\r\n        try {\r\n          const result = chessRef.current.move(move);\r\n          if (result) {\r\n            setFen(chessRef.current.fen());\r\n            // Update turn after opponent's move\r\n            const newTurn = chessRef.current.turn() === 'w' ? 'white' : 'black';\r\n            setTurn(newTurn);\r\n            checkGameStatus();\r\n          } else {\r\n            console.error(\"Invalid move received:\", move);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error applying move:\", error, move);\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"turnUpdate\", (newTurn) => {\r\n      console.log(\"Turn update:\", newTurn);\r\n      setTurn(newTurn);\r\n    });\r\n\r\n    socket.on(\"gameStateUpdate\", (gameState) => {\r\n      console.log(\"Game state update:\", gameState);\r\n      if (gameState.fen && gameState.fen !== \"start\") {\r\n        chessRef.current.load(gameState.fen);\r\n        setFen(gameState.fen);\r\n      }\r\n      if (gameState.turn) {\r\n        setTurn(gameState.turn);\r\n      }\r\n    });\r\n\r\n    // Error events\r\n    socket.on(\"invalidMove\", (msg) => {\r\n      alert(msg);\r\n    });\r\n\r\n    socket.on(\"roomFull\", (msg) => {\r\n      alert(msg);\r\n      navigate(\"/\");\r\n    });\r\n\r\n    socket.on(\"usernameAlreadyTaken\", (msg) => {\r\n      alert(msg);\r\n      // Generate new username and try again\r\n      const newUsername = `Player_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\r\n      localStorage.setItem(\"username\", newUsername);\r\n      window.location.reload();\r\n    });\r\n\r\n    socket.on(\"playerDisconnected\", ({ username: disconnectedUser, role: disconnectedRole }) => {\r\n      console.log(`${disconnectedUser} (${disconnectedRole}) disconnected`);\r\n      setGameStatus(\"waiting\");\r\n    });\r\n\r\n    socket.on(\"error\", (msg) => {\r\n      console.error(\"Socket error:\", msg);\r\n      alert(msg);\r\n    });\r\n\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.emit(\"leaveRoom\", { roomId });\r\n        socketRef.current.disconnect();\r\n      }\r\n    };\r\n  }, [roomId, username, navigate, role]);\r\n\r\n  const checkGameStatus = () => {\r\n    if (chessRef.current.isCheckmate()) {\r\n      const winner = chessRef.current.turn() === 'w' ? 'Black' : 'White';\r\n      alert(`Checkmate! ${winner} wins.`);\r\n      setGameStatus(\"finished\");\r\n    } else if (chessRef.current.isStalemate()) {\r\n      alert(\"Stalemate! Game is a draw.\");\r\n      setGameStatus(\"finished\");\r\n    } else if (chessRef.current.isDraw()) {\r\n      alert(\"Draw!\");\r\n      setGameStatus(\"finished\");\r\n    } else if (chessRef.current.isCheck()) {\r\n      alert(\"Check!\");\r\n    }\r\n  };\r\n\r\n  const onPieceDrop = (sourceSquare, targetSquare) => {\r\n    // Check if it's the player's turn\r\n    if (role !== turn) {\r\n      alert(\"It's not your turn\");\r\n      return false;\r\n    }\r\n\r\n    // Check if game is active\r\n    if (gameStatus !== \"active\") {\r\n      alert(\"Game is not active\");\r\n      return false;\r\n    }\r\n\r\n    // Check connection\r\n    if (connectionStatus !== \"connected\") {\r\n      alert(\"Not connected to server\");\r\n      return false;\r\n    }\r\n\r\n    const move = {\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: \"q\", // Always promote to queen for simplicity\r\n    };\r\n\r\n    try {\r\n      // Try the move locally first\r\n      const gameCopy = new Chess(chessRef.current.fen());\r\n      const result = gameCopy.move(move);\r\n\r\n      if (result) {\r\n        // Apply the move to our local game state\r\n        chessRef.current.move(move);\r\n        setFen(chessRef.current.fen());\r\n        \r\n        // Update turn\r\n        const newTurn = chessRef.current.turn() === 'w' ? 'white' : 'black';\r\n        setTurn(newTurn);\r\n        \r\n        // Send move to server\r\n        socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\r\n        \r\n        // Check game status\r\n        checkGameStatus();\r\n        \r\n        return true;\r\n      } else {\r\n        alert(\"Invalid move\");\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Move error:\", error);\r\n      alert(\"Invalid move\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const onMouseOverSquare = (square) => {\r\n    // Only show highlights if it's the player's turn\r\n    if (role !== turn || gameStatus !== \"active\") {\r\n      setHighlightSquares({});\r\n      return;\r\n    }\r\n\r\n    const moves = chessRef.current.moves({ square, verbose: true });\r\n    if (moves.length === 0) {\r\n      setHighlightSquares({});\r\n      return;\r\n    }\r\n\r\n    const highlights = {};\r\n    moves.forEach((m) => {\r\n      highlights[m.to] = {\r\n        background:\r\n          chessRef.current.get(m.to) !== null \r\n            ? \"rgba(255, 0, 0, 0.4)\" // Capture\r\n            : \"rgba(0, 255, 0, 0.3)\", // Move\r\n      };\r\n    });\r\n    highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" }; // Selected square\r\n\r\n    setHighlightSquares(highlights);\r\n  };\r\n\r\n  const onMouseOutSquare = () => {\r\n    setHighlightSquares({});\r\n  };\r\n\r\n  const getStatusMessage = () => {\r\n    if (connectionStatus !== \"connected\") {\r\n      return `Connection: ${connectionStatus}`;\r\n    }\r\n    if (gameStatus === \"waiting\") {\r\n      return \"Waiting for players...\";\r\n    }\r\n    if (gameStatus === \"finished\") {\r\n      return \"Game finished\";\r\n    }\r\n    return `Turn: ${turn}`;\r\n  };\r\n\r\n  const canPlayMove = () => {\r\n    return connectionStatus === \"connected\" && \r\n           gameStatus === \"active\" && \r\n           role === turn && \r\n           players.white && \r\n           players.black;\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col bg-gray-900 text-white p-4\">\r\n      <div className=\"mb-4\">\r\n        <h2 className=\"text-2xl font-bold mb-2\">Chess Room: {roomId}</h2>\r\n        <div className=\"text-sm text-gray-300\">\r\n          Status: {getStatusMessage()}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex flex-row gap-6\">\r\n        <div className=\"flex flex-col\">\r\n          {/* Game Info */}\r\n          <div className=\"mb-4 p-4 bg-gray-800 rounded-lg\">\r\n            <div className=\"mb-2\">\r\n              <span className=\"text-gray-400\">You are: </span>\r\n              <span className=\"font-bold text-yellow-400\">\r\n                {role || \"Waiting for assignment...\"}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className=\"mb-2\">\r\n              <span className=\"text-gray-400\">Current turn: </span>\r\n              <span className={`font-bold ${turn === 'white' ? 'text-white' : 'text-gray-600'}`}>\r\n                {turn}\r\n              </span>\r\n            </div>\r\n            \r\n            <div className=\"mb-2\">\r\n              <span className=\"text-gray-400\">Players:</span>\r\n              <ul className=\"ml-4 mt-1\">\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-2 h-2 bg-white rounded-full mr-2\"></span>\r\n                  White: {players.white || \"Waiting...\"}\r\n                </li>\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-2 h-2 bg-gray-600 rounded-full mr-2\"></span>\r\n                  Black: {players.black || \"Waiting...\"}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n\r\n            {gameStatus === \"waiting\" && (\r\n              <div className=\"text-yellow-400 text-sm\">\r\n                Waiting for {!players.white ? \"white\" : \"black\"} player...\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Chess Board */}\r\n          <div className=\"relative\">\r\n            <Chessboard\r\n              position={fen === \"start\" ? undefined : fen}\r\n              onPieceDrop={onPieceDrop}\r\n              onMouseOverSquare={onMouseOverSquare}\r\n              onMouseOutSquare={onMouseOutSquare}\r\n              customSquareStyles={highlightSquares}\r\n              boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n              transitionDuration={300}\r\n              calcWidth={({ screenWidth }) => Math.min(500, screenWidth * 0.7)}\r\n              draggable={canPlayMove()}\r\n            />\r\n            \r\n            {/* Overlay for inactive states */}\r\n            {!canPlayMove() && (\r\n              <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center rounded\">\r\n                <div className=\"text-white text-center\">\r\n                  <div className=\"text-lg font-bold\">\r\n                    {connectionStatus !== \"connected\" ? \"Disconnected\" :\r\n                     gameStatus === \"waiting\" ? \"Waiting for players\" :\r\n                     role !== turn ? \"Opponent's turn\" : \"Game not ready\"}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chat Component */}\r\n        <Chat \r\n          socket={socketRef.current} \r\n          roomId={roomId} \r\n          username={username} \r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
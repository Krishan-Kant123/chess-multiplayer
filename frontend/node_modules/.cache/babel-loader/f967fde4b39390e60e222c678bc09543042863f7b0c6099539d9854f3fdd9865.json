{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krishan kant\\\\Desktop\\\\Js\\\\game\\\\frontend\\\\src\\\\components\\\\Room.js\",\n  _s = $RefreshSig$();\n// import { Chessboard } from \"react-chessboard\";\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import io from \"socket.io-client\";\n// import Chat from \"./Chat\";\n// import { Chess } from \"chess.js\";\n// import \"./Room.css\";\n// import toast from \"react-hot-toast\";\n\n// // const SOCKET_SERVER_URL = \"http://localhost:4000\";\n// const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\n\n// const Room = () => {\n//   const { roomId } = useParams();\n//   const navigate = useNavigate();\n//   const username = localStorage.getItem(\"username\") || \"\";\n//   const [role, setRole] = useState(null);\n//   const [turn, setTurn] = useState(\"white\");\n//   const [fen, setFen] = useState(\"start\");\n//   const [highlightSquares, setHighlightSquares] = useState({});\n//   const [boardWidth, setBoardWidth] = useState(400);\n//   const [selectedSquare, setSelectedSquare] = useState(null); // 👈 New state\n//   const socketRef = useRef(null);\n//   const chessRef = useRef(new Chess());\n//   const containerRef = useRef(null);\n\n//   useEffect(() => {\n//     const calculateBoardWidth = () => {\n//       if (containerRef.current) {\n//         const containerWidth = containerRef.current.offsetWidth;\n//         const padding = 32;\n//         const maxWidth = Math.min(containerWidth - padding, 400);\n//         setBoardWidth(Math.max(maxWidth, 280));\n//       }\n//     };\n\n//     calculateBoardWidth();\n//     window.addEventListener(\"resize\", calculateBoardWidth);\n//     return () => window.removeEventListener(\"resize\", calculateBoardWidth);\n//   }, []);\n\n//   useEffect(() => {\n//     if (!username) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     socketRef.current = io(SOCKET_SERVER_URL);\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\n\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\n//       setRole(assignedRole);\n//     });\n\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\n//       setTurn(newTurn);\n//     });\n\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\n//       if (by !== role) {\n//         try {\n//           const result = chessRef.current.move(move);\n//           if (result) {\n//             setFen(chessRef.current.fen());\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//             checkGameStatus();\n//           }\n//         } catch (error) {\n//           console.error(\"Error applying move:\", error, move);\n//         }\n//       }\n//     });\n\n//     socketRef.current.on(\"invalidMove\", (msg) => {\n//       toast.error(msg);\n//     });\n\n//     return () => {\n//       socketRef.current.disconnect();\n//     };\n//   }, [roomId, navigate]);\n\n//   const checkGameStatus = () => {\n//     if (chessRef.current.isCheckmate()) {\n//       toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n//     } else if (chessRef.current.isStalemate()) {\n//       toast(\"Stalemate!\", { icon: \"🤝\" });\n//     } else if (chessRef.current.isCheck()) {\n//       toast(\"Check!\", { icon: \"⚠️\" });\n//     }\n//   };\n\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\n//     // Disabled since we use tap-to-move now\n//     return false;\n//   };\n\n//   const onSquareClick = (square) => {\n//     if (role !== turn) {\n//       toast.error(\"It's not your turn\");\n//       return;\n//     }\n\n//     if (!selectedSquare) {\n//       setSelectedSquare(square);\n//       onMouseOverSquare(square); // optional: highlight options\n//     } else {\n//       const move = {\n//         from: selectedSquare,\n//         to: square,\n//         promotion: \"q\",\n//       };\n\n//       try {\n//         const result = chessRef.current.move(move);\n//         if (result) {\n//           setFen(chessRef.current.fen());\n//           setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//           socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\n//           checkGameStatus();\n//         } else {\n//           toast.error(\"Invalid move\");\n//         }\n//       } catch (e) {\n//         toast.error(\"Invalid move\");\n//       }\n\n//       setSelectedSquare(null);\n//       setHighlightSquares({});\n//     }\n//   };\n\n//   const onMouseOverSquare = (square) => {\n//     const moves = chessRef.current.moves({ square, verbose: true });\n//     if (moves.length === 0) {\n//       setHighlightSquares({});\n//       return;\n//     }\n\n//     const highlights = {};\n//     moves.forEach((m) => {\n//       highlights[m.to] = {\n//         background:\n//           chessRef.current.get(m.to) !== null\n//             ? \"rgba(255, 0, 0, 0.4)\"\n//             : \"rgba(0, 255, 0, 0.3)\",\n//       };\n//     });\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\n//     setHighlightSquares(highlights);\n//   };\n\n//   const onMouseOutSquare = () => {\n//     setHighlightSquares({});\n//   };\n\n//   return (\n//     <div className=\"room-container\">\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\n//       <div className=\"room-content\">\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\n//           <div className=\"info-panel\">\n//             <p>\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\n//             </p>\n//             <p>\n//               Turn: <span className=\"bold-text\">{turn}</span>\n//             </p>\n//           </div>\n//           <div className=\"chessboard-container\">\n//             <Chessboard\n//               position={fen === \"start\" ? undefined : fen}\n//               boardWidth={boardWidth}\n//               onSquareClick={onSquareClick}\n//               onMouseOverSquare={onMouseOverSquare}\n//               onMouseOutSquare={onMouseOutSquare}\n//               customSquareStyles={highlightSquares}\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\n//               transitionDuration={300}\n//               draggable={false} // 👈 Important: disable dragging\n//             />\n//           </div>\n//         </div>\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Room;\n\n// import { Chessboard } from \"react-chessboard\";\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import io from \"socket.io-client\";\n// import Chat from \"./Chat\";\n// import { Chess } from \"chess.js\";\n// import \"./Room.css\";\n// import toast from \"react-hot-toast\";\n\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\n// // const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\n\n// const Room = () => {\n//   const { roomId } = useParams();\n//   const navigate = useNavigate();\n//   const username = localStorage.getItem(\"username\") || \"\";\n//   const [role, setRole] = useState(null);\n//   const [turn, setTurn] = useState(\"white\");\n//   const [fen, setFen] = useState(\"start\");\n//   const [highlightSquares, setHighlightSquares] = useState({});\n//   const [boardWidth, setBoardWidth] = useState(400);\n//   const [selectedSquare, setSelectedSquare] = useState(null);\n//   const [players, setPlayers] = useState({ white: null, black: null });\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const socketRef = useRef(null);\n//   const chessRef = useRef(new Chess());\n//   const containerRef = useRef(null);\n\n//   useEffect(() => {\n//     const calculateBoardWidth = () => {\n//       if (containerRef.current) {\n//         const containerWidth = containerRef.current.offsetWidth;\n//         const padding = 32;\n//         const maxWidth = Math.min(containerWidth - padding, 400);\n//         setBoardWidth(Math.max(maxWidth, 280));\n//       }\n//     };\n\n//     calculateBoardWidth();\n//     window.addEventListener(\"resize\", calculateBoardWidth);\n//     return () => window.removeEventListener(\"resize\", calculateBoardWidth);\n//   }, []);\n\n//   useEffect(() => {\n//     if (!username) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     socketRef.current = io(SOCKET_SERVER_URL);\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\n\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\n//       setRole(assignedRole);\n//     });\n\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\n//       setTurn(newTurn);\n//     });\n\n//     socketRef.current.on(\"fenUpdate\", (savedFen) => {\n//       if (savedFen && savedFen !== \"start\") {\n//         chessRef.current.load(savedFen);\n//         setFen(savedFen);\n//       }\n//     });\n\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\n//       if (by !== role) {\n//         try {\n//           const result = chessRef.current.move(move);\n//           if (result) {\n//             setFen(chessRef.current.fen());\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//             checkGameStatus();\n//           }\n//         } catch (error) {\n//           console.error(\"Error applying move:\", error, move);\n//         }\n//       }\n//     });\n\n//     socketRef.current.on(\"invalidMove\", (msg) => {\n//       toast.error(msg);\n//     });\n\n//     socketRef.current.on(\"playersUpdate\", (data) => {\n//       setPlayers(data);\n//     });\n\n//     socketRef.current.on(\"gameStarted\", (status) => {\n//       setGameStarted(status);\n//     });\n\n//     return () => {\n//       socketRef.current.disconnect();\n//     };\n//   }, [roomId, navigate]);\n\n//   const checkGameStatus = () => {\n//     if (chessRef.current.isCheckmate()) {\n//       toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n//     } else if (chessRef.current.isStalemate()) {\n//       toast(\"Stalemate!\", { icon: \"🤝\" });\n//     } else if (chessRef.current.isCheck()) {\n//       toast(\"Check!\", { icon: \"⚠️\" });\n//     }\n//   };\n\n//   const onPieceDrop = () => {\n//     return false;\n//   };\n\n//   const onSquareClick = (square) => {\n//     if (!gameStarted) {\n//       toast.error(\"Opponent hasn't joined yet.\");\n//       return;\n//     }\n\n//     if (role !== turn) {\n//       toast.error(\"It's not your turn\");\n//       return;\n//     }\n\n//     if (!selectedSquare) {\n//       setSelectedSquare(square);\n//       onMouseOverSquare(square);\n//     } else {\n//       const move = {\n//         from: selectedSquare,\n//         to: square,\n//         promotion: \"q\",\n//       };\n\n//       try {\n//         const result = chessRef.current.move(move);\n//         if (result) {\n//           const newFen = chessRef.current.fen();\n//           setFen(newFen);\n//           setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//           socketRef.current.emit(\"chessMove\", {\n//             roomId,\n//             move,\n//             by: role,\n//             fen: newFen,\n//           });\n//           checkGameStatus();\n//         } else {\n//           toast.error(\"Invalid move\");\n//         }\n//       } catch {\n//         toast.error(\"Invalid move\");\n//       }\n\n//       setSelectedSquare(null);\n//       setHighlightSquares({});\n//     }\n//   };\n\n//   const onMouseOverSquare = (square) => {\n//     const moves = chessRef.current.moves({ square, verbose: true });\n//     if (moves.length === 0) {\n//       setHighlightSquares({});\n//       return;\n//     }\n\n//     const highlights = {};\n//     moves.forEach((m) => {\n//       highlights[m.to] = {\n//         background:\n//           chessRef.current.get(m.to) !== null\n//             ? \"radial-gradient(circle, rgba(255,0,0,0.6) 30%, transparent 30%)\"\n//             : \"radial-gradient(circle, rgba(0,255,0,0.5) 30%, transparent 30%)\",\n//       };\n//     });\n//     highlights[square] = {\n//       background: \"rgba(0, 0, 255, 0.2)\",\n//     };\n//     setHighlightSquares(highlights);\n//   };\n\n//   const onMouseOutSquare = () => {\n//     setHighlightSquares({});\n//   };\n\n//   return (\n//     <div className=\"room-container\">\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\n//       <div className=\"room-content\">\n//         <div className=\"status-panel\">\n//           <p>\n//             You are: <span className=\"bold-text\">{role || \"...\"}</span>\n//           </p>\n//           <p>\n//             Turn: <span className=\"bold-text\">{turn}</span>\n//           </p>\n//           <p>\n//             White:{\" \"}\n//             <span className=\"bold-text\">{players.white || \"Waiting...\"}</span>\n//           </p>\n//           <p>\n//             Black:{\" \"}\n//             <span className=\"bold-text\">{players.black || \"Waiting...\"}</span>\n//           </p>\n//         </div>\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\n//           <div className=\"chessboard-container\">\n//             <Chessboard\n//               position={fen === \"start\" ? undefined : fen}\n//               boardWidth={boardWidth}\n//               onSquareClick={onSquareClick}\n//               onMouseOverSquare={onMouseOverSquare}\n//               onMouseOutSquare={onMouseOutSquare}\n//               customSquareStyles={highlightSquares}\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\n//               transitionDuration={300}\n//               draggable={false}\n//             />\n//           </div>\n//         </div>\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Room;\n\nimport { Chessboard } from \"react-chessboard\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport Chat from \"./Chat\";\nimport { Chess } from \"chess.js\";\nimport \"./Room.css\";\nimport toast from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n// const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\n\nconst Room = () => {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const navigate = useNavigate();\n  const username = localStorage.getItem(\"username\") || \"\";\n  const [role, setRole] = useState(null);\n  const [turn, setTurn] = useState(\"white\");\n  const [fen, setFen] = useState(\"start\");\n  const [highlightSquares, setHighlightSquares] = useState({});\n  const [boardWidth, setBoardWidth] = useState(400);\n  const [selectedSquare, setSelectedSquare] = useState(null);\n  const [players, setPlayers] = useState({\n    white: null,\n    black: null\n  });\n  const [gameStarted, setGameStarted] = useState(false);\n  const socketRef = useRef(null);\n  const chessRef = useRef(new Chess());\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const calculateBoardWidth = () => {\n      if (containerRef.current) {\n        const containerWidth = containerRef.current.offsetWidth;\n        const padding = 32;\n        const maxWidth = Math.min(containerWidth - padding, 400);\n        setBoardWidth(Math.max(maxWidth, 280));\n      }\n    };\n    calculateBoardWidth();\n    window.addEventListener(\"resize\", calculateBoardWidth);\n    return () => window.removeEventListener(\"resize\", calculateBoardWidth);\n  }, []);\n  useEffect(() => {\n    if (!username) {\n      navigate(\"/\");\n      return;\n    }\n    socketRef.current = io(SOCKET_SERVER_URL);\n    socketRef.current.emit(\"joinRoom\", {\n      roomId,\n      username\n    });\n    socketRef.current.on(\"roleAssigned\", assignedRole => {\n      setRole(assignedRole);\n    });\n    socketRef.current.on(\"turnUpdate\", newTurn => {\n      setTurn(newTurn);\n    });\n    socketRef.current.on(\"fenUpdate\", savedFen => {\n      if (savedFen && savedFen !== \"start\") {\n        chessRef.current.load(savedFen);\n        setFen(savedFen);\n      }\n    });\n    socketRef.current.on(\"chessMove\", ({\n      move,\n      by\n    }) => {\n      if (by !== role) {\n        try {\n          const result = chessRef.current.move(move);\n          if (result) {\n            setFen(chessRef.current.fen());\n            setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n            checkGameStatus();\n          }\n        } catch (error) {\n          console.error(\"Error applying move:\", error, move);\n        }\n      }\n    });\n    socketRef.current.on(\"invalidMove\", msg => {\n      toast.error(msg);\n    });\n    socketRef.current.on(\"playersUpdate\", data => {\n      setPlayers(data);\n    });\n    socketRef.current.on(\"gameStarted\", status => {\n      setGameStarted(status);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId, navigate]);\n  const checkGameStatus = () => {\n    if (chessRef.current.isCheckmate()) {\n      toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n    } else if (chessRef.current.isStalemate()) {\n      toast(\"Stalemate!\", {\n        icon: \"🤝\"\n      });\n    } else if (chessRef.current.isCheck()) {\n      toast(\"Check!\", {\n        icon: \"⚠️\"\n      });\n    }\n  };\n  const onDrop = (sourceSquare, targetSquare) => {\n    if (!gameStarted) {\n      toast.error(\"Opponent hasn't joined yet.\");\n      return false;\n    }\n    if (role !== turn) {\n      toast.error(\"It's not your turn\");\n      return false;\n    }\n    const move = {\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: \"q\"\n    };\n    try {\n      const result = chessRef.current.move(move);\n      if (result) {\n        const newFen = chessRef.current.fen();\n        setFen(newFen);\n        setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n        socketRef.current.emit(\"chessMove\", {\n          roomId,\n          move,\n          by: role,\n          fen: newFen\n        });\n        checkGameStatus();\n        return true;\n      }\n    } catch {\n      toast.error(\"Invalid move\");\n    }\n    return false;\n  };\n  const onSquareClick = square => {\n    if (!gameStarted) {\n      toast.error(\"Opponent hasn't joined yet.\");\n      return;\n    }\n    if (role !== turn) {\n      toast.error(\"It's not your turn\");\n      return;\n    }\n    if (!selectedSquare) {\n      setSelectedSquare(square);\n      onMouseOverSquare(square);\n    } else {\n      const move = {\n        from: selectedSquare,\n        to: square,\n        promotion: \"q\"\n      };\n      try {\n        const result = chessRef.current.move(move);\n        if (result) {\n          const newFen = chessRef.current.fen();\n          setFen(newFen);\n          setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n          socketRef.current.emit(\"chessMove\", {\n            roomId,\n            move,\n            by: role,\n            fen: newFen\n          });\n          checkGameStatus();\n        } else {\n          toast.error(\"Invalid move\");\n        }\n      } catch {\n        toast.error(\"Invalid move\");\n      }\n      setSelectedSquare(null);\n      setHighlightSquares({});\n    }\n  };\n  const onMouseOverSquare = square => {\n    const moves = chessRef.current.moves({\n      square,\n      verbose: true\n    });\n    if (moves.length === 0) {\n      setHighlightSquares({});\n      return;\n    }\n    const highlights = {};\n    moves.forEach(m => {\n      highlights[m.to] = {\n        background: \"radial-gradient(circle,rgba(252, 0, 0, 1) 14%, rgba(238, 174, 202, 0) 11%, rgba(245, 0, 0, 0.19) 36%, rgba(250, 10, 10, 1) 58%, rgba(148, 187, 233, 0) 37%, rgba(255, 0, 0, 1) 42%, rgba(148, 187, 233, 0) 0%)\"\n      };\n    });\n    highlights[square] = {\n      background: \"#fa0202\"\n    };\n    setHighlightSquares(highlights);\n  };\n  const onMouseOutSquare = () => {\n    setHighlightSquares({});\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"room-title\",\n      children: [\"Room: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chessboard-wrapper\",\n        ref: containerRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You are: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-text\",\n              children: role || \"...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 24\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Turn: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-text\",\n              children: turn\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"White: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-text\",\n              children: players.white || \"Waiting...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Black: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bold-text\",\n              children: players.black || \"Waiting...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chessboard-container\",\n          children: /*#__PURE__*/_jsxDEV(Chessboard, {\n            position: fen === \"start\" ? undefined : fen,\n            boardWidth: boardWidth,\n            onSquareClick: onSquareClick,\n            onMouseOverSquare: onMouseOverSquare,\n            onMouseOutSquare: onMouseOutSquare,\n            onPieceDrop: onDrop,\n            customSquareStyles: highlightSquares,\n            boardOrientation: role === \"white\" ? \"white\" : \"black\",\n            transitionDuration: 300,\n            draggable: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        socket: socketRef.current,\n        roomId: roomId,\n        username: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 626,\n    columnNumber: 5\n  }, this);\n};\n_s(Room, \"wWcgesA91RYLrRW4/9AvgRkxCR0=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["Chessboard","React","useEffect","useState","useRef","useParams","useNavigate","io","Chat","Chess","toast","jsxDEV","_jsxDEV","SOCKET_SERVER_URL","Room","_s","roomId","navigate","username","localStorage","getItem","role","setRole","turn","setTurn","fen","setFen","highlightSquares","setHighlightSquares","boardWidth","setBoardWidth","selectedSquare","setSelectedSquare","players","setPlayers","white","black","gameStarted","setGameStarted","socketRef","chessRef","containerRef","calculateBoardWidth","current","containerWidth","offsetWidth","padding","maxWidth","Math","min","max","window","addEventListener","removeEventListener","emit","on","assignedRole","newTurn","savedFen","load","move","by","result","checkGameStatus","error","console","msg","data","status","disconnect","isCheckmate","success","isStalemate","icon","isCheck","onDrop","sourceSquare","targetSquare","from","to","promotion","newFen","onSquareClick","square","onMouseOverSquare","moves","verbose","length","highlights","forEach","m","background","onMouseOutSquare","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","position","undefined","onPieceDrop","customSquareStyles","boardOrientation","transitionDuration","draggable","socket","_c","$RefreshReg$"],"sources":["C:/Users/krishan kant/Desktop/Js/game/frontend/src/components/Room.js"],"sourcesContent":["// import { Chessboard } from \"react-chessboard\";\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import io from \"socket.io-client\";\r\n// import Chat from \"./Chat\";\r\n// import { Chess } from \"chess.js\";\r\n// import \"./Room.css\";\r\n// import toast from \"react-hot-toast\";\r\n\r\n// // const SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n// const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\r\n\r\n// const Room = () => {\r\n//   const { roomId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const username = localStorage.getItem(\"username\") || \"\";\r\n//   const [role, setRole] = useState(null);\r\n//   const [turn, setTurn] = useState(\"white\");\r\n//   const [fen, setFen] = useState(\"start\");\r\n//   const [highlightSquares, setHighlightSquares] = useState({});\r\n//   const [boardWidth, setBoardWidth] = useState(400);\r\n//   const [selectedSquare, setSelectedSquare] = useState(null); // 👈 New state\r\n//   const socketRef = useRef(null);\r\n//   const chessRef = useRef(new Chess());\r\n//   const containerRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const calculateBoardWidth = () => {\r\n//       if (containerRef.current) {\r\n//         const containerWidth = containerRef.current.offsetWidth;\r\n//         const padding = 32;\r\n//         const maxWidth = Math.min(containerWidth - padding, 400);\r\n//         setBoardWidth(Math.max(maxWidth, 280));\r\n//       }\r\n//     };\r\n\r\n//     calculateBoardWidth();\r\n//     window.addEventListener(\"resize\", calculateBoardWidth);\r\n//     return () => window.removeEventListener(\"resize\", calculateBoardWidth);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!username) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     socketRef.current = io(SOCKET_SERVER_URL);\r\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n//       setRole(assignedRole);\r\n//     });\r\n\r\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n//       setTurn(newTurn);\r\n//     });\r\n\r\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n//       if (by !== role) {\r\n//         try {\r\n//           const result = chessRef.current.move(move);\r\n//           if (result) {\r\n//             setFen(chessRef.current.fen());\r\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//             checkGameStatus();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error applying move:\", error, move);\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     socketRef.current.on(\"invalidMove\", (msg) => {\r\n//       toast.error(msg);\r\n//     });\r\n\r\n//     return () => {\r\n//       socketRef.current.disconnect();\r\n//     };\r\n//   }, [roomId, navigate]);\r\n\r\n//   const checkGameStatus = () => {\r\n//     if (chessRef.current.isCheckmate()) {\r\n//       toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n//     } else if (chessRef.current.isStalemate()) {\r\n//       toast(\"Stalemate!\", { icon: \"🤝\" });\r\n//     } else if (chessRef.current.isCheck()) {\r\n//       toast(\"Check!\", { icon: \"⚠️\" });\r\n//     }\r\n//   };\r\n\r\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\r\n//     // Disabled since we use tap-to-move now\r\n//     return false;\r\n//   };\r\n\r\n//   const onSquareClick = (square) => {\r\n//     if (role !== turn) {\r\n//       toast.error(\"It's not your turn\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!selectedSquare) {\r\n//       setSelectedSquare(square);\r\n//       onMouseOverSquare(square); // optional: highlight options\r\n//     } else {\r\n//       const move = {\r\n//         from: selectedSquare,\r\n//         to: square,\r\n//         promotion: \"q\",\r\n//       };\r\n\r\n//       try {\r\n//         const result = chessRef.current.move(move);\r\n//         if (result) {\r\n//           setFen(chessRef.current.fen());\r\n//           setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//           socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\r\n//           checkGameStatus();\r\n//         } else {\r\n//           toast.error(\"Invalid move\");\r\n//         }\r\n//       } catch (e) {\r\n//         toast.error(\"Invalid move\");\r\n//       }\r\n\r\n//       setSelectedSquare(null);\r\n//       setHighlightSquares({});\r\n//     }\r\n//   };\r\n\r\n//   const onMouseOverSquare = (square) => {\r\n//     const moves = chessRef.current.moves({ square, verbose: true });\r\n//     if (moves.length === 0) {\r\n//       setHighlightSquares({});\r\n//       return;\r\n//     }\r\n\r\n//     const highlights = {};\r\n//     moves.forEach((m) => {\r\n//       highlights[m.to] = {\r\n//         background:\r\n//           chessRef.current.get(m.to) !== null\r\n//             ? \"rgba(255, 0, 0, 0.4)\"\r\n//             : \"rgba(0, 255, 0, 0.3)\",\r\n//       };\r\n//     });\r\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\r\n//     setHighlightSquares(highlights);\r\n//   };\r\n\r\n//   const onMouseOutSquare = () => {\r\n//     setHighlightSquares({});\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"room-container\">\r\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\r\n//       <div className=\"room-content\">\r\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n//           <div className=\"info-panel\">\r\n//             <p>\r\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n//             </p>\r\n//             <p>\r\n//               Turn: <span className=\"bold-text\">{turn}</span>\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"chessboard-container\">\r\n//             <Chessboard\r\n//               position={fen === \"start\" ? undefined : fen}\r\n//               boardWidth={boardWidth}\r\n//               onSquareClick={onSquareClick}\r\n//               onMouseOverSquare={onMouseOverSquare}\r\n//               onMouseOutSquare={onMouseOutSquare}\r\n//               customSquareStyles={highlightSquares}\r\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n//               transitionDuration={300}\r\n//               draggable={false} // 👈 Important: disable dragging\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Room;\r\n\r\n\r\n\r\n\r\n// import { Chessboard } from \"react-chessboard\";\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import io from \"socket.io-client\";\r\n// import Chat from \"./Chat\";\r\n// import { Chess } from \"chess.js\";\r\n// import \"./Room.css\";\r\n// import toast from \"react-hot-toast\";\r\n\r\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n// // const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\r\n\r\n// const Room = () => {\r\n//   const { roomId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const username = localStorage.getItem(\"username\") || \"\";\r\n//   const [role, setRole] = useState(null);\r\n//   const [turn, setTurn] = useState(\"white\");\r\n//   const [fen, setFen] = useState(\"start\");\r\n//   const [highlightSquares, setHighlightSquares] = useState({});\r\n//   const [boardWidth, setBoardWidth] = useState(400);\r\n//   const [selectedSquare, setSelectedSquare] = useState(null);\r\n//   const [players, setPlayers] = useState({ white: null, black: null });\r\n//   const [gameStarted, setGameStarted] = useState(false);\r\n//   const socketRef = useRef(null);\r\n//   const chessRef = useRef(new Chess());\r\n//   const containerRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const calculateBoardWidth = () => {\r\n//       if (containerRef.current) {\r\n//         const containerWidth = containerRef.current.offsetWidth;\r\n//         const padding = 32;\r\n//         const maxWidth = Math.min(containerWidth - padding, 400);\r\n//         setBoardWidth(Math.max(maxWidth, 280));\r\n//       }\r\n//     };\r\n\r\n//     calculateBoardWidth();\r\n//     window.addEventListener(\"resize\", calculateBoardWidth);\r\n//     return () => window.removeEventListener(\"resize\", calculateBoardWidth);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!username) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     socketRef.current = io(SOCKET_SERVER_URL);\r\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n//       setRole(assignedRole);\r\n//     });\r\n\r\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n//       setTurn(newTurn);\r\n//     });\r\n\r\n//     socketRef.current.on(\"fenUpdate\", (savedFen) => {\r\n//       if (savedFen && savedFen !== \"start\") {\r\n//         chessRef.current.load(savedFen);\r\n//         setFen(savedFen);\r\n//       }\r\n//     });\r\n\r\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n//       if (by !== role) {\r\n//         try {\r\n//           const result = chessRef.current.move(move);\r\n//           if (result) {\r\n//             setFen(chessRef.current.fen());\r\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//             checkGameStatus();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error applying move:\", error, move);\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     socketRef.current.on(\"invalidMove\", (msg) => {\r\n//       toast.error(msg);\r\n//     });\r\n\r\n//     socketRef.current.on(\"playersUpdate\", (data) => {\r\n//       setPlayers(data);\r\n//     });\r\n\r\n//     socketRef.current.on(\"gameStarted\", (status) => {\r\n//       setGameStarted(status);\r\n//     });\r\n\r\n//     return () => {\r\n//       socketRef.current.disconnect();\r\n//     };\r\n//   }, [roomId, navigate]);\r\n\r\n//   const checkGameStatus = () => {\r\n//     if (chessRef.current.isCheckmate()) {\r\n//       toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n//     } else if (chessRef.current.isStalemate()) {\r\n//       toast(\"Stalemate!\", { icon: \"🤝\" });\r\n//     } else if (chessRef.current.isCheck()) {\r\n//       toast(\"Check!\", { icon: \"⚠️\" });\r\n//     }\r\n//   };\r\n\r\n//   const onPieceDrop = () => {\r\n//     return false;\r\n//   };\r\n\r\n//   const onSquareClick = (square) => {\r\n//     if (!gameStarted) {\r\n//       toast.error(\"Opponent hasn't joined yet.\");\r\n//       return;\r\n//     }\r\n\r\n//     if (role !== turn) {\r\n//       toast.error(\"It's not your turn\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!selectedSquare) {\r\n//       setSelectedSquare(square);\r\n//       onMouseOverSquare(square);\r\n//     } else {\r\n//       const move = {\r\n//         from: selectedSquare,\r\n//         to: square,\r\n//         promotion: \"q\",\r\n//       };\r\n\r\n//       try {\r\n//         const result = chessRef.current.move(move);\r\n//         if (result) {\r\n//           const newFen = chessRef.current.fen();\r\n//           setFen(newFen);\r\n//           setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//           socketRef.current.emit(\"chessMove\", {\r\n//             roomId,\r\n//             move,\r\n//             by: role,\r\n//             fen: newFen,\r\n//           });\r\n//           checkGameStatus();\r\n//         } else {\r\n//           toast.error(\"Invalid move\");\r\n//         }\r\n//       } catch {\r\n//         toast.error(\"Invalid move\");\r\n//       }\r\n\r\n//       setSelectedSquare(null);\r\n//       setHighlightSquares({});\r\n//     }\r\n//   };\r\n\r\n//   const onMouseOverSquare = (square) => {\r\n//     const moves = chessRef.current.moves({ square, verbose: true });\r\n//     if (moves.length === 0) {\r\n//       setHighlightSquares({});\r\n//       return;\r\n//     }\r\n\r\n//     const highlights = {};\r\n//     moves.forEach((m) => {\r\n//       highlights[m.to] = {\r\n//         background:\r\n//           chessRef.current.get(m.to) !== null\r\n//             ? \"radial-gradient(circle, rgba(255,0,0,0.6) 30%, transparent 30%)\"\r\n//             : \"radial-gradient(circle, rgba(0,255,0,0.5) 30%, transparent 30%)\",\r\n//       };\r\n//     });\r\n//     highlights[square] = {\r\n//       background: \"rgba(0, 0, 255, 0.2)\",\r\n//     };\r\n//     setHighlightSquares(highlights);\r\n//   };\r\n\r\n//   const onMouseOutSquare = () => {\r\n//     setHighlightSquares({});\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"room-container\">\r\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\r\n//       <div className=\"room-content\">\r\n//         <div className=\"status-panel\">\r\n//           <p>\r\n//             You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n//           </p>\r\n//           <p>\r\n//             Turn: <span className=\"bold-text\">{turn}</span>\r\n//           </p>\r\n//           <p>\r\n//             White:{\" \"}\r\n//             <span className=\"bold-text\">{players.white || \"Waiting...\"}</span>\r\n//           </p>\r\n//           <p>\r\n//             Black:{\" \"}\r\n//             <span className=\"bold-text\">{players.black || \"Waiting...\"}</span>\r\n//           </p>\r\n//         </div>\r\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n//           <div className=\"chessboard-container\">\r\n//             <Chessboard\r\n//               position={fen === \"start\" ? undefined : fen}\r\n//               boardWidth={boardWidth}\r\n//               onSquareClick={onSquareClick}\r\n//               onMouseOverSquare={onMouseOverSquare}\r\n//               onMouseOutSquare={onMouseOutSquare}\r\n//               customSquareStyles={highlightSquares}\r\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n//               transitionDuration={300}\r\n//               draggable={false}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Room;\r\n\r\n\r\n\r\nimport { Chessboard } from \"react-chessboard\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport Chat from \"./Chat\";\r\nimport { Chess } from \"chess.js\";\r\nimport \"./Room.css\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n// const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\r\n\r\nconst Room = () => {\r\n  const { roomId } = useParams();\r\n  const navigate = useNavigate();\r\n  const username = localStorage.getItem(\"username\") || \"\";\r\n  const [role, setRole] = useState(null);\r\n  const [turn, setTurn] = useState(\"white\");\r\n  const [fen, setFen] = useState(\"start\");\r\n  const [highlightSquares, setHighlightSquares] = useState({});\r\n  const [boardWidth, setBoardWidth] = useState(400);\r\n  const [selectedSquare, setSelectedSquare] = useState(null);\r\n  const [players, setPlayers] = useState({ white: null, black: null });\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const socketRef = useRef(null);\r\n  const chessRef = useRef(new Chess());\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const calculateBoardWidth = () => {\r\n      if (containerRef.current) {\r\n        const containerWidth = containerRef.current.offsetWidth;\r\n        const padding = 32;\r\n        const maxWidth = Math.min(containerWidth - padding, 400);\r\n        setBoardWidth(Math.max(maxWidth, 280));\r\n      }\r\n    };\r\n\r\n    calculateBoardWidth();\r\n    window.addEventListener(\"resize\", calculateBoardWidth);\r\n    return () => window.removeEventListener(\"resize\", calculateBoardWidth);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!username) {\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    socketRef.current = io(SOCKET_SERVER_URL);\r\n    socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n    socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n      setRole(assignedRole);\r\n    });\r\n\r\n    socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n      setTurn(newTurn);\r\n    });\r\n\r\n    socketRef.current.on(\"fenUpdate\", (savedFen) => {\r\n      if (savedFen && savedFen !== \"start\") {\r\n        chessRef.current.load(savedFen);\r\n        setFen(savedFen);\r\n      }\r\n    });\r\n\r\n    socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n      if (by !== role) {\r\n        try {\r\n          const result = chessRef.current.move(move);\r\n          if (result) {\r\n            setFen(chessRef.current.fen());\r\n            setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n            checkGameStatus();\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error applying move:\", error, move);\r\n        }\r\n      }\r\n    });\r\n\r\n    socketRef.current.on(\"invalidMove\", (msg) => {\r\n      toast.error(msg);\r\n    });\r\n\r\n    socketRef.current.on(\"playersUpdate\", (data) => {\r\n      setPlayers(data);\r\n    });\r\n\r\n    socketRef.current.on(\"gameStarted\", (status) => {\r\n      setGameStarted(status);\r\n    });\r\n\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, [roomId, navigate]);\r\n\r\n  const checkGameStatus = () => {\r\n    if (chessRef.current.isCheckmate()) {\r\n      toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n    } else if (chessRef.current.isStalemate()) {\r\n      toast(\"Stalemate!\", { icon: \"🤝\" });\r\n    } else if (chessRef.current.isCheck()) {\r\n      toast(\"Check!\", { icon: \"⚠️\" });\r\n    }\r\n  };\r\n\r\n  const onDrop = (sourceSquare, targetSquare) => {\r\n    if (!gameStarted) {\r\n      toast.error(\"Opponent hasn't joined yet.\");\r\n      return false;\r\n    }\r\n    if (role !== turn) {\r\n      toast.error(\"It's not your turn\");\r\n      return false;\r\n    }\r\n    const move = {\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: \"q\",\r\n    };\r\n    try {\r\n      const result = chessRef.current.move(move);\r\n      if (result) {\r\n        const newFen = chessRef.current.fen();\r\n        setFen(newFen);\r\n        setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n        socketRef.current.emit(\"chessMove\", { roomId, move, by: role, fen: newFen });\r\n        checkGameStatus();\r\n        return true;\r\n      }\r\n    } catch {\r\n      toast.error(\"Invalid move\");\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const onSquareClick = (square) => {\r\n    if (!gameStarted) {\r\n      toast.error(\"Opponent hasn't joined yet.\");\r\n      return;\r\n    }\r\n    if (role !== turn) {\r\n      toast.error(\"It's not your turn\");\r\n      return;\r\n    }\r\n    if (!selectedSquare) {\r\n      setSelectedSquare(square);\r\n      onMouseOverSquare(square);\r\n    } else {\r\n      const move = {\r\n        from: selectedSquare,\r\n        to: square,\r\n        promotion: \"q\",\r\n      };\r\n      try {\r\n        const result = chessRef.current.move(move);\r\n        if (result) {\r\n          const newFen = chessRef.current.fen();\r\n          setFen(newFen);\r\n          setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n          socketRef.current.emit(\"chessMove\", { roomId, move, by: role, fen: newFen });\r\n          checkGameStatus();\r\n        } else {\r\n          toast.error(\"Invalid move\");\r\n        }\r\n      } catch {\r\n        toast.error(\"Invalid move\");\r\n      }\r\n      setSelectedSquare(null);\r\n      setHighlightSquares({});\r\n    }\r\n  };\r\n\r\n  const onMouseOverSquare = (square) => {\r\n    const moves = chessRef.current.moves({ square, verbose: true });\r\n    if (moves.length === 0) {\r\n      setHighlightSquares({});\r\n      return;\r\n    }\r\n    const highlights = {};\r\n    moves.forEach((m) => {\r\n      highlights[m.to] = {\r\n        background:\r\n       \"radial-gradient(circle,rgba(252, 0, 0, 1) 14%, rgba(238, 174, 202, 0) 11%, rgba(245, 0, 0, 0.19) 36%, rgba(250, 10, 10, 1) 58%, rgba(148, 187, 233, 0) 37%, rgba(255, 0, 0, 1) 42%, rgba(148, 187, 233, 0) 0%)\"\r\n        ,\r\n      };\r\n    });\r\n    highlights[square] = {\r\n      background: \"#fa0202\",\r\n    };\r\n    setHighlightSquares(highlights);\r\n  };\r\n\r\n  const onMouseOutSquare = () => {\r\n    setHighlightSquares({});\r\n  };\r\n\r\n  return (\r\n    <div className=\"room-container\">\r\n      <h2 className=\"room-title\">Room: {roomId}</h2>\r\n      <div className=\"room-content\">\r\n        <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n          <div className=\"info-panel\">\r\n            <p>\r\n              You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n            </p>\r\n            <p>\r\n              Turn: <span className=\"bold-text\">{turn}</span>\r\n            </p>\r\n            <p>\r\n              White: <span className=\"bold-text\">{players.white || \"Waiting...\"}</span>\r\n            </p>\r\n            <p>\r\n              Black: <span className=\"bold-text\">{players.black || \"Waiting...\"}</span>\r\n            </p>\r\n          </div>\r\n          <div className=\"chessboard-container\">\r\n            <Chessboard\r\n              position={fen === \"start\" ? undefined : fen}\r\n              boardWidth={boardWidth}\r\n              onSquareClick={onSquareClick}\r\n              onMouseOverSquare={onMouseOverSquare}\r\n              onMouseOutSquare={onMouseOutSquare}\r\n              onPieceDrop={onDrop}\r\n              customSquareStyles={highlightSquares}\r\n              boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n              transitionDuration={300}\r\n              draggable={true}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAO,YAAY;AACnB,OAAOC,KAAK,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,iBAAiB,GAAG,uBAAuB;AACjD;;AAEA,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM;IAAEC;EAAO,CAAC,GAAGX,SAAS,CAAC,CAAC;EAC9B,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
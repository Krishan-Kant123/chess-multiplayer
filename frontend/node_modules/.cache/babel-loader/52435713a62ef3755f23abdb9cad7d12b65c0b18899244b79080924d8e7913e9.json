{"ast":null,"code":"// import { Chessboard } from \"react-chessboard\";\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { useParams, useNavigate } from \"react-router-dom\";\n// import io from \"socket.io-client\";\n// import Chat from \"./Chat\";\n// import { Chess } from \"chess.js\";\n// import \"./Room.css\";\n// import toast from \"react-hot-toast\";\n\n// // const SOCKET_SERVER_URL = \"http://localhost:4000\";\n// const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\n\n// const Room = () => {\n//   const { roomId } = useParams();\n//   const navigate = useNavigate();\n//   const username = localStorage.getItem(\"username\") || \"\";\n//   const [role, setRole] = useState(null);\n//   const [turn, setTurn] = useState(\"white\");\n//   const [fen, setFen] = useState(\"start\");\n//   const [highlightSquares, setHighlightSquares] = useState({});\n//   const [boardWidth, setBoardWidth] = useState(400);\n//   const [selectedSquare, setSelectedSquare] = useState(null); // 👈 New state\n//   const socketRef = useRef(null);\n//   const chessRef = useRef(new Chess());\n//   const containerRef = useRef(null);\n\n//   useEffect(() => {\n//     const calculateBoardWidth = () => {\n//       if (containerRef.current) {\n//         const containerWidth = containerRef.current.offsetWidth;\n//         const padding = 32;\n//         const maxWidth = Math.min(containerWidth - padding, 400);\n//         setBoardWidth(Math.max(maxWidth, 280));\n//       }\n//     };\n\n//     calculateBoardWidth();\n//     window.addEventListener(\"resize\", calculateBoardWidth);\n//     return () => window.removeEventListener(\"resize\", calculateBoardWidth);\n//   }, []);\n\n//   useEffect(() => {\n//     if (!username) {\n//       navigate(\"/\");\n//       return;\n//     }\n\n//     socketRef.current = io(SOCKET_SERVER_URL);\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\n\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\n//       setRole(assignedRole);\n//     });\n\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\n//       setTurn(newTurn);\n//     });\n\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\n//       if (by !== role) {\n//         try {\n//           const result = chessRef.current.move(move);\n//           if (result) {\n//             setFen(chessRef.current.fen());\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//             checkGameStatus();\n//           }\n//         } catch (error) {\n//           console.error(\"Error applying move:\", error, move);\n//         }\n//       }\n//     });\n\n//     socketRef.current.on(\"invalidMove\", (msg) => {\n//       toast.error(msg);\n//     });\n\n//     return () => {\n//       socketRef.current.disconnect();\n//     };\n//   }, [roomId, navigate]);\n\n//   const checkGameStatus = () => {\n//     if (chessRef.current.isCheckmate()) {\n//       toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\n//     } else if (chessRef.current.isStalemate()) {\n//       toast(\"Stalemate!\", { icon: \"🤝\" });\n//     } else if (chessRef.current.isCheck()) {\n//       toast(\"Check!\", { icon: \"⚠️\" });\n//     }\n//   };\n\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\n//     // Disabled since we use tap-to-move now\n//     return false;\n//   };\n\n//   const onSquareClick = (square) => {\n//     if (role !== turn) {\n//       toast.error(\"It's not your turn\");\n//       return;\n//     }\n\n//     if (!selectedSquare) {\n//       setSelectedSquare(square);\n//       onMouseOverSquare(square); // optional: highlight options\n//     } else {\n//       const move = {\n//         from: selectedSquare,\n//         to: square,\n//         promotion: \"q\",\n//       };\n\n//       try {\n//         const result = chessRef.current.move(move);\n//         if (result) {\n//           setFen(chessRef.current.fen());\n//           setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\n//           socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\n//           checkGameStatus();\n//         } else {\n//           toast.error(\"Invalid move\");\n//         }\n//       } catch (e) {\n//         toast.error(\"Invalid move\");\n//       }\n\n//       setSelectedSquare(null);\n//       setHighlightSquares({});\n//     }\n//   };\n\n//   const onMouseOverSquare = (square) => {\n//     const moves = chessRef.current.moves({ square, verbose: true });\n//     if (moves.length === 0) {\n//       setHighlightSquares({});\n//       return;\n//     }\n\n//     const highlights = {};\n//     moves.forEach((m) => {\n//       highlights[m.to] = {\n//         background:\n//           chessRef.current.get(m.to) !== null\n//             ? \"rgba(255, 0, 0, 0.4)\"\n//             : \"rgba(0, 255, 0, 0.3)\",\n//       };\n//     });\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\n//     setHighlightSquares(highlights);\n//   };\n\n//   const onMouseOutSquare = () => {\n//     setHighlightSquares({});\n//   };\n\n//   return (\n//     <div className=\"room-container\">\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\n//       <div className=\"room-content\">\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\n//           <div className=\"info-panel\">\n//             <p>\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\n//             </p>\n//             <p>\n//               Turn: <span className=\"bold-text\">{turn}</span>\n//             </p>\n//           </div>\n//           <div className=\"chessboard-container\">\n//             <Chessboard\n//               position={fen === \"start\" ? undefined : fen}\n//               boardWidth={boardWidth}\n//               onSquareClick={onSquareClick}\n//               onMouseOverSquare={onMouseOverSquare}\n//               onMouseOutSquare={onMouseOutSquare}\n//               customSquareStyles={highlightSquares}\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\n//               transitionDuration={300}\n//               draggable={false} // 👈 Important: disable dragging\n//             />\n//           </div>\n//         </div>\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Room;\n\nconst {\n  Server\n} = require(\"socket.io\");\nconst http = require(\"http\");\nconst express = require(\"express\");\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\nconst rooms = {};\nio.on(\"connection\", socket => {\n  console.log(`Client connected: ${socket.id}`);\n  socket.on(\"joinRoom\", ({\n    roomId,\n    username\n  }) => {\n    socket.join(roomId);\n    socket.data.username = username;\n    socket.data.roomId = roomId;\n    if (!rooms[roomId]) {\n      rooms[roomId] = {\n        white: null,\n        black: null,\n        turn: \"white\",\n        fen: \"start\" // 👈 default game state\n      };\n    }\n    const room = rooms[roomId];\n\n    // Handle reconnect: remove stale assignment\n    if (room.white && room.white.id === socket.id) room.white = null;\n    if (room.black && room.black.id === socket.id) room.black = null;\n    let assignedRole = \"viewer\";\n    if (!room.white) {\n      room.white = {\n        id: socket.id,\n        username\n      };\n      assignedRole = \"white\";\n    } else if (!room.black) {\n      room.black = {\n        id: socket.id,\n        username\n      };\n      assignedRole = \"black\";\n    }\n    socket.emit(\"roleAssigned\", assignedRole);\n    socket.emit(\"turnUpdate\", room.turn);\n    socket.emit(\"fenUpdate\", room.fen); // 👈 emit FEN to rejoiners\n\n    const playersData = {\n      white: room.white ? room.white.username : null,\n      black: room.black ? room.black.username : null\n    };\n    console.log(`Room ${roomId} players:`, playersData);\n    io.to(roomId).emit(\"playersUpdate\", playersData);\n    const gameStarted = !!(room.white && room.black);\n    io.to(roomId).emit(\"gameStarted\", gameStarted);\n  });\n  socket.on(\"chessMove\", ({\n    roomId,\n    move,\n    by,\n    fen\n  }) => {\n    const room = rooms[roomId];\n    if (!room) return;\n    const role = getRoleBySocketId(roomId, socket.id);\n    if (!role || role === \"viewer\") {\n      socket.emit(\"invalidMove\", \"Viewers can't move.\");\n      return;\n    }\n    if (role !== room.turn) {\n      socket.emit(\"invalidMove\", \"It's not your turn.\");\n      return;\n    }\n\n    // Save the new FEN to keep game state\n    if (fen) {\n      room.fen = fen;\n    }\n    io.to(roomId).emit(\"chessMove\", {\n      move,\n      by\n    });\n    room.turn = room.turn === \"white\" ? \"black\" : \"white\";\n    io.to(roomId).emit(\"turnUpdate\", room.turn);\n  });\n  socket.on(\"chatMessage\", ({\n    roomId,\n    username,\n    message\n  }) => {\n    io.to(roomId).emit(\"chatMessage\", {\n      username,\n      message\n    });\n  });\n  socket.on(\"disconnect\", () => {\n    console.log(`Client disconnected: ${socket.id}`);\n    const roomId = socket.data.roomId;\n    if (!roomId || !rooms[roomId]) return;\n    const room = rooms[roomId];\n    let changed = false;\n    if (room.white && room.white.id === socket.id) {\n      room.white = null;\n      changed = true;\n    }\n    if (room.black && room.black.id === socket.id) {\n      room.black = null;\n      changed = true;\n    }\n    if (changed) {\n      const playersData = {\n        white: room.white ? room.white.username : null,\n        black: room.black ? room.black.username : null\n      };\n      io.to(roomId).emit(\"playersUpdate\", playersData);\n      io.to(roomId).emit(\"gameStarted\", false);\n    }\n    if (!room.white && !room.black) {\n      delete rooms[roomId];\n      console.log(`Room ${roomId} deleted - no players left`);\n    }\n  });\n});\nfunction getRoleBySocketId(roomId, socketId) {\n  const room = rooms[roomId];\n  if (!room) return null;\n  if (room.white && room.white.id === socketId) return \"white\";\n  if (room.black && room.black.id === socketId) return \"black\";\n  return \"viewer\";\n}\nserver.listen(4000, () => {\n  console.log(\"Server is listening on port 4000\");\n});","map":{"version":3,"names":["Server","require","http","express","app","server","createServer","io","cors","origin","methods","rooms","on","socket","console","log","id","roomId","username","join","data","white","black","turn","fen","room","assignedRole","emit","playersData","to","gameStarted","move","by","role","getRoleBySocketId","message","changed","socketId","listen"],"sources":["C:/Users/krishan kant/Desktop/Js/game/frontend/src/components/Room.js"],"sourcesContent":["// import { Chessboard } from \"react-chessboard\";\r\n// import React, { useEffect, useState, useRef } from \"react\";\r\n// import { useParams, useNavigate } from \"react-router-dom\";\r\n// import io from \"socket.io-client\";\r\n// import Chat from \"./Chat\";\r\n// import { Chess } from \"chess.js\";\r\n// import \"./Room.css\";\r\n// import toast from \"react-hot-toast\";\r\n\r\n// // const SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n// const SOCKET_SERVER_URL = \"https://chess-multiplayer-rhci.onrender.com\";\r\n\r\n// const Room = () => {\r\n//   const { roomId } = useParams();\r\n//   const navigate = useNavigate();\r\n//   const username = localStorage.getItem(\"username\") || \"\";\r\n//   const [role, setRole] = useState(null);\r\n//   const [turn, setTurn] = useState(\"white\");\r\n//   const [fen, setFen] = useState(\"start\");\r\n//   const [highlightSquares, setHighlightSquares] = useState({});\r\n//   const [boardWidth, setBoardWidth] = useState(400);\r\n//   const [selectedSquare, setSelectedSquare] = useState(null); // 👈 New state\r\n//   const socketRef = useRef(null);\r\n//   const chessRef = useRef(new Chess());\r\n//   const containerRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const calculateBoardWidth = () => {\r\n//       if (containerRef.current) {\r\n//         const containerWidth = containerRef.current.offsetWidth;\r\n//         const padding = 32;\r\n//         const maxWidth = Math.min(containerWidth - padding, 400);\r\n//         setBoardWidth(Math.max(maxWidth, 280));\r\n//       }\r\n//     };\r\n\r\n//     calculateBoardWidth();\r\n//     window.addEventListener(\"resize\", calculateBoardWidth);\r\n//     return () => window.removeEventListener(\"resize\", calculateBoardWidth);\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!username) {\r\n//       navigate(\"/\");\r\n//       return;\r\n//     }\r\n\r\n//     socketRef.current = io(SOCKET_SERVER_URL);\r\n//     socketRef.current.emit(\"joinRoom\", { roomId, username });\r\n\r\n//     socketRef.current.on(\"roleAssigned\", (assignedRole) => {\r\n//       setRole(assignedRole);\r\n//     });\r\n\r\n//     socketRef.current.on(\"turnUpdate\", (newTurn) => {\r\n//       setTurn(newTurn);\r\n//     });\r\n\r\n//     socketRef.current.on(\"chessMove\", ({ move, by }) => {\r\n//       if (by !== role) {\r\n//         try {\r\n//           const result = chessRef.current.move(move);\r\n//           if (result) {\r\n//             setFen(chessRef.current.fen());\r\n//             setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//             checkGameStatus();\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error applying move:\", error, move);\r\n//         }\r\n//       }\r\n//     });\r\n\r\n//     socketRef.current.on(\"invalidMove\", (msg) => {\r\n//       toast.error(msg);\r\n//     });\r\n\r\n//     return () => {\r\n//       socketRef.current.disconnect();\r\n//     };\r\n//   }, [roomId, navigate]);\r\n\r\n//   const checkGameStatus = () => {\r\n//     if (chessRef.current.isCheckmate()) {\r\n//       toast.success(`Checkmate! ${turn === \"white\" ? \"Black\" : \"White\"} wins.`);\r\n//     } else if (chessRef.current.isStalemate()) {\r\n//       toast(\"Stalemate!\", { icon: \"🤝\" });\r\n//     } else if (chessRef.current.isCheck()) {\r\n//       toast(\"Check!\", { icon: \"⚠️\" });\r\n//     }\r\n//   };\r\n\r\n//   const onPieceDrop = (sourceSquare, targetSquare) => {\r\n//     // Disabled since we use tap-to-move now\r\n//     return false;\r\n//   };\r\n\r\n//   const onSquareClick = (square) => {\r\n//     if (role !== turn) {\r\n//       toast.error(\"It's not your turn\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!selectedSquare) {\r\n//       setSelectedSquare(square);\r\n//       onMouseOverSquare(square); // optional: highlight options\r\n//     } else {\r\n//       const move = {\r\n//         from: selectedSquare,\r\n//         to: square,\r\n//         promotion: \"q\",\r\n//       };\r\n\r\n//       try {\r\n//         const result = chessRef.current.move(move);\r\n//         if (result) {\r\n//           setFen(chessRef.current.fen());\r\n//           setTurn(chessRef.current.turn() === \"w\" ? \"white\" : \"black\");\r\n//           socketRef.current.emit(\"chessMove\", { roomId, move, by: role });\r\n//           checkGameStatus();\r\n//         } else {\r\n//           toast.error(\"Invalid move\");\r\n//         }\r\n//       } catch (e) {\r\n//         toast.error(\"Invalid move\");\r\n//       }\r\n\r\n//       setSelectedSquare(null);\r\n//       setHighlightSquares({});\r\n//     }\r\n//   };\r\n\r\n//   const onMouseOverSquare = (square) => {\r\n//     const moves = chessRef.current.moves({ square, verbose: true });\r\n//     if (moves.length === 0) {\r\n//       setHighlightSquares({});\r\n//       return;\r\n//     }\r\n\r\n//     const highlights = {};\r\n//     moves.forEach((m) => {\r\n//       highlights[m.to] = {\r\n//         background:\r\n//           chessRef.current.get(m.to) !== null\r\n//             ? \"rgba(255, 0, 0, 0.4)\"\r\n//             : \"rgba(0, 255, 0, 0.3)\",\r\n//       };\r\n//     });\r\n//     highlights[square] = { background: \"rgba(0, 0, 255, 0.3)\" };\r\n//     setHighlightSquares(highlights);\r\n//   };\r\n\r\n//   const onMouseOutSquare = () => {\r\n//     setHighlightSquares({});\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"room-container\">\r\n//       <h2 className=\"room-title\">Room: {roomId}</h2>\r\n//       <div className=\"room-content\">\r\n//         <div className=\"chessboard-wrapper\" ref={containerRef}>\r\n//           <div className=\"info-panel\">\r\n//             <p>\r\n//               You are: <span className=\"bold-text\">{role || \"...\"}</span>\r\n//             </p>\r\n//             <p>\r\n//               Turn: <span className=\"bold-text\">{turn}</span>\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"chessboard-container\">\r\n//             <Chessboard\r\n//               position={fen === \"start\" ? undefined : fen}\r\n//               boardWidth={boardWidth}\r\n//               onSquareClick={onSquareClick}\r\n//               onMouseOverSquare={onMouseOverSquare}\r\n//               onMouseOutSquare={onMouseOutSquare}\r\n//               customSquareStyles={highlightSquares}\r\n//               boardOrientation={role === \"white\" ? \"white\" : \"black\"}\r\n//               transitionDuration={300}\r\n//               draggable={false} // 👈 Important: disable dragging\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <Chat socket={socketRef.current} roomId={roomId} username={username} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Room;\r\n\r\n\r\n\r\nconst { Server } = require(\"socket.io\");\r\nconst http = require(\"http\");\r\nconst express = require(\"express\");\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = new Server(server, {\r\n  cors: {\r\n    origin: \"*\",\r\n    methods: [\"GET\", \"POST\"],\r\n  },\r\n});\r\n\r\nconst rooms = {};\r\n\r\nio.on(\"connection\", (socket) => {\r\n  console.log(`Client connected: ${socket.id}`);\r\n\r\n  socket.on(\"joinRoom\", ({ roomId, username }) => {\r\n    socket.join(roomId);\r\n    socket.data.username = username;\r\n    socket.data.roomId = roomId;\r\n\r\n    if (!rooms[roomId]) {\r\n      rooms[roomId] = {\r\n        white: null,\r\n        black: null,\r\n        turn: \"white\",\r\n        fen: \"start\", // 👈 default game state\r\n      };\r\n    }\r\n\r\n    const room = rooms[roomId];\r\n\r\n    // Handle reconnect: remove stale assignment\r\n    if (room.white && room.white.id === socket.id) room.white = null;\r\n    if (room.black && room.black.id === socket.id) room.black = null;\r\n\r\n    let assignedRole = \"viewer\";\r\n\r\n    if (!room.white) {\r\n      room.white = { id: socket.id, username };\r\n      assignedRole = \"white\";\r\n    } else if (!room.black) {\r\n      room.black = { id: socket.id, username };\r\n      assignedRole = \"black\";\r\n    }\r\n\r\n    socket.emit(\"roleAssigned\", assignedRole);\r\n    socket.emit(\"turnUpdate\", room.turn);\r\n    socket.emit(\"fenUpdate\", room.fen); // 👈 emit FEN to rejoiners\r\n\r\n    const playersData = {\r\n      white: room.white ? room.white.username : null,\r\n      black: room.black ? room.black.username : null,\r\n    };\r\n\r\n    console.log(`Room ${roomId} players:`, playersData);\r\n    io.to(roomId).emit(\"playersUpdate\", playersData);\r\n\r\n    const gameStarted = !!(room.white && room.black);\r\n    io.to(roomId).emit(\"gameStarted\", gameStarted);\r\n  });\r\n\r\n  socket.on(\"chessMove\", ({ roomId, move, by, fen }) => {\r\n    const room = rooms[roomId];\r\n    if (!room) return;\r\n\r\n    const role = getRoleBySocketId(roomId, socket.id);\r\n    if (!role || role === \"viewer\") {\r\n      socket.emit(\"invalidMove\", \"Viewers can't move.\");\r\n      return;\r\n    }\r\n\r\n    if (role !== room.turn) {\r\n      socket.emit(\"invalidMove\", \"It's not your turn.\");\r\n      return;\r\n    }\r\n\r\n    // Save the new FEN to keep game state\r\n    if (fen) {\r\n      room.fen = fen;\r\n    }\r\n\r\n    io.to(roomId).emit(\"chessMove\", { move, by });\r\n    room.turn = room.turn === \"white\" ? \"black\" : \"white\";\r\n    io.to(roomId).emit(\"turnUpdate\", room.turn);\r\n  });\r\n\r\n  socket.on(\"chatMessage\", ({ roomId, username, message }) => {\r\n    io.to(roomId).emit(\"chatMessage\", { username, message });\r\n  });\r\n\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(`Client disconnected: ${socket.id}`);\r\n\r\n    const roomId = socket.data.roomId;\r\n    if (!roomId || !rooms[roomId]) return;\r\n\r\n    const room = rooms[roomId];\r\n    let changed = false;\r\n\r\n    if (room.white && room.white.id === socket.id) {\r\n      room.white = null;\r\n      changed = true;\r\n    }\r\n\r\n    if (room.black && room.black.id === socket.id) {\r\n      room.black = null;\r\n      changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n      const playersData = {\r\n        white: room.white ? room.white.username : null,\r\n        black: room.black ? room.black.username : null,\r\n      };\r\n\r\n      io.to(roomId).emit(\"playersUpdate\", playersData);\r\n      io.to(roomId).emit(\"gameStarted\", false);\r\n    }\r\n\r\n    if (!room.white && !room.black) {\r\n      delete rooms[roomId];\r\n      console.log(`Room ${roomId} deleted - no players left`);\r\n    }\r\n  });\r\n});\r\n\r\nfunction getRoleBySocketId(roomId, socketId) {\r\n  const room = rooms[roomId];\r\n  if (!room) return null;\r\n  if (room.white && room.white.id === socketId) return \"white\";\r\n  if (room.black && room.black.id === socketId) return \"black\";\r\n  return \"viewer\";\r\n}\r\n\r\nserver.listen(4000, () => {\r\n  console.log(\"Server is listening on port 4000\");\r\n});\r\n"],"mappingsvC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMG,GAAG,GAAGD,OAAO,CAAC,CAAC;AACrB,MAAME,MAAM,GAAGH,IAAI,CAACI,YAAY,CAACF,GAAG,CAAC;AACrC,MAAMG,EAAE,GAAG,IAAIP,MAAM,CAACK,MAAM,EAAE;EAC5BG,IAAI,EAAE;IACJC,MAAM,EAAE,GAAG;IACXC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM;EACzB;AACF,CAAC,CAAC;AAEF,MAAMC,KAAK,GAAG,CAAC,CAAC;AAEhBJ,EAAE,CAACK,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;EAC9BC,OAAO,CAACC,GAAG,CAAC,qBAAqBF,MAAM,CAACG,EAAE,EAAE,CAAC;EAE7CH,MAAM,CAACD,EAAE,CAAC,UAAU,EAAE,CAAC;IAAEK,MAAM;IAAEC;EAAS,CAAC,KAAK;IAC9CL,MAAM,CAACM,IAAI,CAACF,MAAM,CAAC;IACnBJ,MAAM,CAACO,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IAC/BL,MAAM,CAACO,IAAI,CAACH,MAAM,GAAGA,MAAM;IAE3B,IAAI,CAACN,KAAK,CAACM,MAAM,CAAC,EAAE;MAClBN,KAAK,CAACM,MAAM,CAAC,GAAG;QACdI,KAAK,EAAE,IAAI;QACXC,KAAK,EAAE,IAAI;QACXC,IAAI,EAAE,OAAO;QACbC,GAAG,EAAE,OAAO,CAAE;MAChB,CAAC;IACH;IAEA,MAAMC,IAAI,GAAGd,KAAK,CAACM,MAAM,CAAC;;IAE1B;IACA,IAAIQ,IAAI,CAACJ,KAAK,IAAII,IAAI,CAACJ,KAAK,CAACL,EAAE,KAAKH,MAAM,CAACG,EAAE,EAAES,IAAI,CAACJ,KAAK,GAAG,IAAI;IAChE,IAAII,IAAI,CAACH,KAAK,IAAIG,IAAI,CAACH,KAAK,CAACN,EAAE,KAAKH,MAAM,CAACG,EAAE,EAAES,IAAI,CAACH,KAAK,GAAG,IAAI;IAEhE,IAAII,YAAY,GAAG,QAAQ;IAE3B,IAAI,CAACD,IAAI,CAACJ,KAAK,EAAE;MACfI,IAAI,CAACJ,KAAK,GAAG;QAAEL,EAAE,EAAEH,MAAM,CAACG,EAAE;QAAEE;MAAS,CAAC;MACxCQ,YAAY,GAAG,OAAO;IACxB,CAAC,MAAM,IAAI,CAACD,IAAI,CAACH,KAAK,EAAE;MACtBG,IAAI,CAACH,KAAK,GAAG;QAAEN,EAAE,EAAEH,MAAM,CAACG,EAAE;QAAEE;MAAS,CAAC;MACxCQ,YAAY,GAAG,OAAO;IACxB;IAEAb,MAAM,CAACc,IAAI,CAAC,cAAc,EAAED,YAAY,CAAC;IACzCb,MAAM,CAACc,IAAI,CAAC,YAAY,EAAEF,IAAI,CAACF,IAAI,CAAC;IACpCV,MAAM,CAACc,IAAI,CAAC,WAAW,EAAEF,IAAI,CAACD,GAAG,CAAC,CAAC,CAAC;;IAEpC,MAAMI,WAAW,GAAG;MAClBP,KAAK,EAAEI,IAAI,CAACJ,KAAK,GAAGI,IAAI,CAACJ,KAAK,CAACH,QAAQ,GAAG,IAAI;MAC9CI,KAAK,EAAEG,IAAI,CAACH,KAAK,GAAGG,IAAI,CAACH,KAAK,CAACJ,QAAQ,GAAG;IAC5C,CAAC;IAEDJ,OAAO,CAACC,GAAG,CAAC,QAAQE,MAAM,WAAW,EAAEW,WAAW,CAAC;IACnDrB,EAAE,CAACsB,EAAE,CAACZ,MAAM,CAAC,CAACU,IAAI,CAAC,eAAe,EAAEC,WAAW,CAAC;IAEhD,MAAME,WAAW,GAAG,CAAC,EAAEL,IAAI,CAACJ,KAAK,IAAII,IAAI,CAACH,KAAK,CAAC;IAChDf,EAAE,CAACsB,EAAE,CAACZ,MAAM,CAAC,CAACU,IAAI,CAAC,aAAa,EAAEG,WAAW,CAAC;EAChD,CAAC,CAAC;EAEFjB,MAAM,CAACD,EAAE,CAAC,WAAW,EAAE,CAAC;IAAEK,MAAM;IAAEc,IAAI;IAAEC,EAAE;IAAER;EAAI,CAAC,KAAK;IACpD,MAAMC,IAAI,GAAGd,KAAK,CAACM,MAAM,CAAC;IAC1B,IAAI,CAACQ,IAAI,EAAE;IAEX,MAAMQ,IAAI,GAAGC,iBAAiB,CAACjB,MAAM,EAAEJ,MAAM,CAACG,EAAE,CAAC;IACjD,IAAI,CAACiB,IAAI,IAAIA,IAAI,KAAK,QAAQ,EAAE;MAC9BpB,MAAM,CAACc,IAAI,CAAC,aAAa,EAAE,qBAAqB,CAAC;MACjD;IACF;IAEA,IAAIM,IAAI,KAAKR,IAAI,CAACF,IAAI,EAAE;MACtBV,MAAM,CAACc,IAAI,CAAC,aAAa,EAAE,qBAAqB,CAAC;MACjD;IACF;;IAEA;IACA,IAAIH,GAAG,EAAE;MACPC,IAAI,CAACD,GAAG,GAAGA,GAAG;IAChB;IAEAjB,EAAE,CAACsB,EAAE,CAACZ,MAAM,CAAC,CAACU,IAAI,CAAC,WAAW,EAAE;MAAEI,IAAI;MAAEC;IAAG,CAAC,CAAC;IAC7CP,IAAI,CAACF,IAAI,GAAGE,IAAI,CAACF,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO;IACrDhB,EAAE,CAACsB,EAAE,CAACZ,MAAM,CAAC,CAACU,IAAI,CAAC,YAAY,EAAEF,IAAI,CAACF,IAAI,CAAC;EAC7C,CAAC,CAAC;EAEFV,MAAM,CAACD,EAAE,CAAC,aAAa,EAAE,CAAC;IAAEK,MAAM;IAAEC,QAAQ;IAAEiB;EAAQ,CAAC,KAAK;IAC1D5B,EAAE,CAACsB,EAAE,CAACZ,MAAM,CAAC,CAACU,IAAI,CAAC,aAAa,EAAE;MAAET,QAAQ;MAAEiB;IAAQ,CAAC,CAAC;EAC1D,CAAC,CAAC;EAEFtB,MAAM,CAACD,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BE,OAAO,CAACC,GAAG,CAAC,wBAAwBF,MAAM,CAACG,EAAE,EAAE,CAAC;IAEhD,MAAMC,MAAM,GAAGJ,MAAM,CAACO,IAAI,CAACH,MAAM;IACjC,IAAI,CAACA,MAAM,IAAI,CAACN,KAAK,CAACM,MAAM,CAAC,EAAE;IAE/B,MAAMQ,IAAI,GAAGd,KAAK,CAACM,MAAM,CAAC;IAC1B,IAAImB,OAAO,GAAG,KAAK;IAEnB,IAAIX,IAAI,CAACJ,KAAK,IAAII,IAAI,CAACJ,KAAK,CAACL,EAAE,KAAKH,MAAM,CAACG,EAAE,EAAE;MAC7CS,IAAI,CAACJ,KAAK,GAAG,IAAI;MACjBe,OAAO,GAAG,IAAI;IAChB;IAEA,IAAIX,IAAI,CAACH,KAAK,IAAIG,IAAI,CAACH,KAAK,CAACN,EAAE,KAAKH,MAAM,CAACG,EAAE,EAAE;MAC7CS,IAAI,CAACH,KAAK,GAAG,IAAI;MACjBc,OAAO,GAAG,IAAI;IAChB;IAEA,IAAIA,OAAO,EAAE;MACX,MAAMR,WAAW,GAAG;QAClBP,KAAK,EAAEI,IAAI,CAACJ,KAAK,GAAGI,IAAI,CAACJ,KAAK,CAACH,QAAQ,GAAG,IAAI;QAC9CI,KAAK,EAAEG,IAAI,CAACH,KAAK,GAAGG,IAAI,CAACH,KAAK,CAACJ,QAAQ,GAAG;MAC5C,CAAC;MAEDX,EAAE,CAACsB,EAAE,CAACZ,MAAM,CAAC,CAACU,IAAI,CAAC,eAAe,EAAEC,WAAW,CAAC;MAChDrB,EAAE,CAACsB,EAAE,CAACZ,MAAM,CAAC,CAACU,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC;IAC1C;IAEA,IAAI,CAACF,IAAI,CAACJ,KAAK,IAAI,CAACI,IAAI,CAACH,KAAK,EAAE;MAC9B,OAAOX,KAAK,CAACM,MAAM,CAAC;MACpBH,OAAO,CAACC,GAAG,CAAC,QAAQE,MAAM,4BAA4B,CAAC;IACzD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,SAASiB,iBAAiBA,CAACjB,MAAM,EAAEoB,QAAQ,EAAE;EAC3C,MAAMZ,IAAI,GAAGd,KAAK,CAACM,MAAM,CAAC;EAC1B,IAAI,CAACQ,IAAI,EAAE,OAAO,IAAI;EACtB,IAAIA,IAAI,CAACJ,KAAK,IAAII,IAAI,CAACJ,KAAK,CAACL,EAAE,KAAKqB,QAAQ,EAAE,OAAO,OAAO;EAC5D,IAAIZ,IAAI,CAACH,KAAK,IAAIG,IAAI,CAACH,KAAK,CAACN,EAAE,KAAKqB,QAAQ,EAAE,OAAO,OAAO;EAC5D,OAAO,QAAQ;AACjB;AAEAhC,MAAM,CAACiC,MAAM,CAAC,IAAI,EAAE,MAAM;EACxBxB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;AACjD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}